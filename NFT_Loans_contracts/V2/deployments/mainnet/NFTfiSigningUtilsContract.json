{
  "address": "0x5A42d72372858E10Edc03B26bF449F78fF3c0e6F",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minLoanPrincipalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxLoanPrincipalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftCollateralId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftCollateralContract",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "minLoanDuration",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxLoanDuration",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "maxInterestRateForDurationInBasisPoints",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "referralFeeInBasisPoints",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "revenueSharePartner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "loanERC20Denomination",
              "type": "address"
            }
          ],
          "internalType": "struct LoanData.ListingTerms",
          "name": "_listingTerms",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct LoanData.Signature",
          "name": "_signature",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        }
      ],
      "name": "isValidBorrowerSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minLoanPrincipalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxLoanPrincipalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftCollateralId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftCollateralContract",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "minLoanDuration",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxLoanDuration",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "maxInterestRateForDurationInBasisPoints",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "referralFeeInBasisPoints",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "revenueSharePartner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "loanERC20Denomination",
              "type": "address"
            }
          ],
          "internalType": "struct LoanData.ListingTerms",
          "name": "_listingTerms",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "safeTransferable",
                  "type": "bool"
                }
              ],
              "internalType": "struct IBundleBuilder.BundleElementERC721[]",
              "name": "erc721s",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IBundleBuilder.BundleElementERC20[]",
              "name": "erc20s",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct IBundleBuilder.BundleElementERC1155[]",
              "name": "erc1155s",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IBundleBuilder.BundleElements",
          "name": "_bundleElements",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct LoanData.Signature",
          "name": "_signature",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        }
      ],
      "name": "isValidBorrowerSignatureBundle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_newLoanDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_newMaximumRepaymentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_renegotiationFee",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct LoanData.Signature",
          "name": "_signature",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        }
      ],
      "name": "isValidLenderRenegotiationSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "loanPrincipalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maximumRepaymentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftCollateralId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftCollateralContract",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "loanDuration",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "loanAdminFeeInBasisPoints",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "loanERC20Denomination",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            }
          ],
          "internalType": "struct LoanData.Offer",
          "name": "_offer",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct LoanData.Signature",
          "name": "_signature",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        }
      ],
      "name": "isValidLenderSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "loanPrincipalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maximumRepaymentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftCollateralId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftCollateralContract",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "loanDuration",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "loanAdminFeeInBasisPoints",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "loanERC20Denomination",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            }
          ],
          "internalType": "struct LoanData.Offer",
          "name": "_offer",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "safeTransferable",
                  "type": "bool"
                }
              ],
              "internalType": "struct IBundleBuilder.BundleElementERC721[]",
              "name": "erc721s",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IBundleBuilder.BundleElementERC20[]",
              "name": "erc20s",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "ids",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct IBundleBuilder.BundleElementERC1155[]",
              "name": "erc1155s",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IBundleBuilder.BundleElements",
          "name": "_bundleElements",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct LoanData.Signature",
          "name": "_signature",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        }
      ],
      "name": "isValidLenderSignatureBundle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0626b1a6ce32e4179d1f14122718967de836e57003c4af95327868ab7f55138e",
  "receipt": {
    "to": null,
    "from": "0x214a4bC7C7843918DDbeF45EE47EBEd1688B0ff2",
    "contractAddress": "0x5A42d72372858E10Edc03B26bF449F78fF3c0e6F",
    "transactionIndex": 12,
    "gasUsed": "966275",
    "logsBloom": "0x
    "blockHash": "0x6e3a6e75af82a803c2c94cf07c1cccdb6701976761e14eb087f315371e82c1b1",
    "transactionHash": "0x0626b1a6ce32e4179d1f14122718967de836e57003c4af95327868ab7f55138e",
    "logs": [],
    "blockNumber": 14443207,
    "cumulativeGasUsed": "1426154",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e960dbb71492b307ed8580de393cc147",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minLoanPrincipalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanPrincipalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftCollateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftCollateralContract\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"minLoanDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxLoanDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"maxInterestRateForDurationInBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"referralFeeInBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"revenueSharePartner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanERC20Denomination\",\"type\":\"address\"}],\"internalType\":\"struct LoanData.ListingTerms\",\"name\":\"_listingTerms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LoanData.Signature\",\"name\":\"_signature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"}],\"name\":\"isValidBorrowerSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minLoanPrincipalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoanPrincipalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftCollateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftCollateralContract\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"minLoanDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxLoanDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"maxInterestRateForDurationInBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"referralFeeInBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"revenueSharePartner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanERC20Denomination\",\"type\":\"address\"}],\"internalType\":\"struct LoanData.ListingTerms\",\"name\":\"_listingTerms\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"safeTransferable\",\"type\":\"bool\"}],\"internalType\":\"struct IBundleBuilder.BundleElementERC721[]\",\"name\":\"erc721s\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBundleBuilder.BundleElementERC20[]\",\"name\":\"erc20s\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IBundleBuilder.BundleElementERC1155[]\",\"name\":\"erc1155s\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBundleBuilder.BundleElements\",\"name\":\"_bundleElements\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LoanData.Signature\",\"name\":\"_signature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"}],\"name\":\"isValidBorrowerSignatureBundle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_newLoanDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_newMaximumRepaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_renegotiationFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LoanData.Signature\",\"name\":\"_signature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"}],\"name\":\"isValidLenderRenegotiationSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"loanPrincipalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumRepaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftCollateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftCollateralContract\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"loanDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"loanAdminFeeInBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"loanERC20Denomination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"internalType\":\"struct LoanData.Offer\",\"name\":\"_offer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LoanData.Signature\",\"name\":\"_signature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"}],\"name\":\"isValidLenderSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"loanPrincipalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumRepaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftCollateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftCollateralContract\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"loanDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"loanAdminFeeInBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"loanERC20Denomination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"internalType\":\"struct LoanData.Offer\",\"name\":\"_offer\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"safeTransferable\",\"type\":\"bool\"}],\"internalType\":\"struct IBundleBuilder.BundleElementERC721[]\",\"name\":\"erc721s\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBundleBuilder.BundleElementERC20[]\",\"name\":\"erc20s\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IBundleBuilder.BundleElementERC1155[]\",\"name\":\"erc1155s\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBundleBuilder.BundleElements\",\"name\":\"_bundleElements\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LoanData.Signature\",\"name\":\"_signature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"}],\"name\":\"isValidLenderSignatureBundle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"NFTfi\",\"kind\":\"dev\",\"methods\":{\"isValidBorrowerSignature((uint256,uint256,uint256,address,uint32,uint32,uint16,uint16,address,address),(uint256,uint256,address,bytes),address)\":{\"params\":{\"_listingTerms\":\"- The listing terms struct containing: - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest for this loan. - minLoanPrincipalAmount: The minumum sum of money transferred from lender to borrower at the beginning of the loan, measured in loanERC20Denomination's smallest units. - maxLoanPrincipalAmount: The  sum of money transferred from lender to borrower at the beginning of the loan, measured in loanERC20Denomination's smallest units. - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay early. - nftCollateralContract: The address of the ERC721 contract of the NFT collateral. - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this loan. The NFT is stored within this contract during the duration of the loan. - revenueSharePartner: The address of the partner that will receive the revenue share. - minLoanDuration: The minumum amount of time (measured in seconds) that can elapse before the lender can liquidate the loan and seize the underlying collateral NFT. - maxLoanDuration: The maximum amount of time (measured in seconds) that can elapse before the lender can liquidate the loan and seize the underlying collateral NFT. - maxInterestRateForDurationInBasisPoints: This is maximum the interest rate (measured in basis points, e.g. hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and is irrelevant so it should be set to 0. - referralFeeInBasisPoints: The percent (measured in basis points) of the loan principal amount that will be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\",\"_loanContract\":\"- Address of the loan contract where the signature is going to be used\",\"_signature\":\"- The offer struct containing: - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`. - nonce: The nonce referred here is not the same as an Ethereum account's nonce. We are referring instead to a nonce that is used by the lender or the borrower when they are first signing off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes:   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.   - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce. - expiry: Date when the signature expires - signature: The ECDSA signature of the borrower, obtained off-chain ahead of time, signing the following combination of parameters:   - listingTerms.loanERC20Denomination,   - listingTerms.minLoanPrincipalAmount,   - listingTerms.maxLoanPrincipalAmount,   - listingTerms.nftCollateralContract,   - listingTerms.nftCollateralId,   - listingTerms.revenueSharePartner,   - listingTerms.minLoanDuration,   - listingTerms.maxLoanDuration,   - listingTerms.maxInterestRateForDurationInBasisPoints,   - listingTerms.referralFeeInBasisPoints,   - signature.signer,   - signature.nonce,   - signature.expiry,   - loan contract address,   - chainId\"}},\"isValidBorrowerSignatureBundle((uint256,uint256,uint256,address,uint32,uint32,uint16,uint16,address,address),((address,uint256,bool)[],(address,uint256)[],(address,uint256[],uint256[])[]),(uint256,uint256,address,bytes),address)\":{\"params\":{\"_bundleElements\":\"- the lists of erc721-20-1155 tokens that are to be bundled\",\"_listingTerms\":\"- The listing terms struct containing: - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest for this loan. - minLoanPrincipalAmount: The minumum sum of money transferred from lender to borrower at the beginning of the loan, measured in loanERC20Denomination's smallest units. - maxLoanPrincipalAmount: The  sum of money transferred from lender to borrower at the beginning of the loan, measured in loanERC20Denomination's smallest units. - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay early. - nftCollateralContract: The address of the ERC721 contract of the NFT collateral. - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this loan. The NFT is stored within this contract during the duration of the loan. - revenueSharePartner: The address of the partner that will receive the revenue share. - minLoanDuration: The minumum amount of time (measured in seconds) that can elapse before the lender can liquidate the loan and seize the underlying collateral NFT. - maxLoanDuration: The maximum amount of time (measured in seconds) that can elapse before the lender can liquidate the loan and seize the underlying collateral NFT. - maxInterestRateForDurationInBasisPoints: This is maximum the interest rate (measured in basis points, e.g. hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and is irrelevant so it should be set to 0. - referralFeeInBasisPoints: The percent (measured in basis points) of the loan principal amount that will be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\",\"_loanContract\":\"- Address of the loan contract where the signature is going to be used\",\"_signature\":\"- The offer struct containing: - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`. - nonce: The nonce referred here is not the same as an Ethereum account's nonce. We are referring instead to a nonce that is used by the lender or the borrower when they are first signing off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes:   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.   - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce. - expiry: Date when the signature expires - signature: The ECDSA signature of the borrower, obtained off-chain ahead of time, signing the following combination of parameters:   - listingTerms.loanERC20Denomination,   - listingTerms.minLoanPrincipalAmount,   - listingTerms.maxLoanPrincipalAmount,   - listingTerms.nftCollateralContract,   - listingTerms.nftCollateralId,   - listingTerms.revenueSharePartner,   - listingTerms.minLoanDuration,   - listingTerms.maxLoanDuration,   - listingTerms.maxInterestRateForDurationInBasisPoints,   - listingTerms.referralFeeInBasisPoints,   - bundleElements   - signature.signer,   - signature.nonce,   - signature.expiry,   - loan contract address,   - chainId\"}},\"isValidLenderRenegotiationSignature(uint256,uint32,uint256,uint256,(uint256,uint256,address,bytes),address)\":{\"params\":{\"_loanContract\":\"- Address of the loan contract where the signature is going to be used\",\"_loanId\":\"- The unique identifier for the loan to be renegotiated\",\"_newLoanDuration\":\"- The new amount of time (measured in seconds) that can elapse before the lender can liquidate the loan and seize the underlying collateral NFT.\",\"_newMaximumRepaymentAmount\":\"- The new maximum amount of money that the borrower would be required to retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay early.\",\"_renegotiationFee\":\"Agreed upon fee in ether that borrower pays for the lender for the renegitiation\",\"_signature\":\"- The signature structure containing: - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`. - nonce: The nonce referred here is not the same as an Ethereum account's nonce. We are referring instead to a nonce that is used by the lender or the borrower when they are first signing off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes: - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once. - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun() , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce. - expiry - The date when the renegotiation offer expires - lenderSignature - The ECDSA signature of the lender, obtained off-chain ahead of time, signing the following combination of parameters: - _loanId - _newLoanDuration - _newMaximumRepaymentAmount - _lender - _lenderNonce - _expiry  - loan contract address, - chainId\"}},\"isValidLenderSignature((uint256,uint256,uint256,address,uint32,uint16,address,address),(uint256,uint256,address,bytes),address)\":{\"params\":{\"_loanContract\":\"- Address of the loan contract where the signature is going to be used\",\"_offer\":\"- The offer struct containing: - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest for this loan. - loanPrincipalAmount: The original sum of money transferred from lender to borrower at the beginning of the loan, measured in loanERC20Denomination's smallest units. - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay early. - nftCollateralContract: The address of the ERC721 contract of the NFT collateral. - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this loan. The NFT is stored within this contract during the duration of the loan. - referrer: The address of the referrer who found the lender matching the listing, Zero address to signal this there is no referrer. - loanDuration: The amount of time (measured in seconds) that can elapse before the lender can liquidate the loan and seize the underlying collateral NFT. - loanInterestRateForDurationInBasisPoints: This is the interest rate (measured in basis points, e.g. hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and is irrelevant so it should be set to 0. - loanAdminFeeInBasisPoints: The percent (measured in basis points) of the interest earned that will be taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest earned.\",\"_signature\":\"- The signature structure containing: - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`. - nonce: The nonce referred here is not the same as an Ethereum account's nonce. We are referring instead to a nonce that is used by the lender or the borrower when they are first signing off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes:   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.   - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce. - expiry: Date when the signature expires - signature: The ECDSA signature of the lender, obtained off-chain ahead of time, signing the following combination of parameters:   - offer.loanERC20Denomination   - offer.loanPrincipalAmount   - offer.maximumRepaymentAmount   - offer.nftCollateralContract   - offer.nftCollateralId   - offer.referrer   - offer.loanDuration   - offer.loanAdminFeeInBasisPoints   - signature.signer,   - signature.nonce,   - signature.expiry,   - loan contract address,   - chainId\"}},\"isValidLenderSignatureBundle((uint256,uint256,uint256,address,uint32,uint16,address,address),((address,uint256,bool)[],(address,uint256)[],(address,uint256[],uint256[])[]),(uint256,uint256,address,bytes),address)\":{\"params\":{\"_bundleElements\":\"- the lists of erc721-20-1155 tokens that are to be bundled\",\"_loanContract\":\"- Address of the loan contract where the signature is going to be used\",\"_offer\":\"- The offer struct containing: - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest for this loan. - loanPrincipalAmount: The original sum of money transferred from lender to borrower at the beginning of the loan, measured in loanERC20Denomination's smallest units. - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay early. - nftCollateralContract: The address of the ERC721 contract of the NFT collateral. - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this loan. The NFT is stored within this contract during the duration of the loan. - referrer: The address of the referrer who found the lender matching the listing, Zero address to signal this there is no referrer. - loanDuration: The amount of time (measured in seconds) that can elapse before the lender can liquidate the loan and seize the underlying collateral NFT. - loanInterestRateForDurationInBasisPoints: This is the interest rate (measured in basis points, e.g. hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and is irrelevant so it should be set to 0. - loanAdminFeeInBasisPoints: The percent (measured in basis points) of the interest earned that will be taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest earned.\",\"_signature\":\"- The signature structure containing: - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`. - nonce: The nonce referred here is not the same as an Ethereum account's nonce. We are referring instead to a nonce that is used by the lender or the borrower when they are first signing off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes:   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.   - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce. - expiry: Date when the signature expires - signature: The ECDSA signature of the lender, obtained off-chain ahead of time, signing the following combination of parameters:   - offer.loanERC20Denomination   - offer.loanPrincipalAmount   - offer.maximumRepaymentAmount   - offer.nftCollateralContract   - offer.nftCollateralId   - offer.referrer   - offer.loanDuration   - offer.loanAdminFeeInBasisPoints   - bundleElements   - signature.signer,   - signature.nonce,   - signature.expiry,   - loan contract address,   - chainId\"}}},\"title\":\"NFTfiSigningUtilsContract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isValidBorrowerSignature((uint256,uint256,uint256,address,uint32,uint32,uint16,uint16,address,address),(uint256,uint256,address,bytes),address)\":{\"notice\":\"This function is when the lender accepts a borrower's binding listing terms, to validate the lender's signature that the borrower provided off-chain to verify that it did indeed made such listing.\"},\"isValidBorrowerSignatureBundle((uint256,uint256,uint256,address,uint32,uint32,uint16,uint16,address,address),((address,uint256,bool)[],(address,uint256)[],(address,uint256[],uint256[])[]),(uint256,uint256,address,bytes),address)\":{\"notice\":\"This function is when the lender accepts a borrower's binding listing terms, to validate the lender's signature that the borrower provided off-chain to verify that it did indeed made such listing.\"},\"isValidLenderRenegotiationSignature(uint256,uint32,uint256,uint256,(uint256,uint256,address,bytes),address)\":{\"notice\":\"This function is called in renegotiateLoan() to validate the lender's signature that the lender provided off-chain to verify that they did indeed want to agree to this loan renegotiation according to these terms.\"},\"isValidLenderSignature((uint256,uint256,uint256,address,uint32,uint16,address,address),(uint256,uint256,address,bytes),address)\":{\"notice\":\"This function is when the borrower accepts a lender's offer, to validate the lender's signature that the lender provided off-chain to verify that it did indeed made such offer.\"},\"isValidLenderSignatureBundle((uint256,uint256,uint256,address,uint32,uint16,address,address),((address,uint256,bool)[],(address,uint256)[],(address,uint256[],uint256[])[]),(uint256,uint256,address,bytes),address)\":{\"notice\":\"This function is when the borrower accepts a lender's offer, to validate the lender's signature that the lender provided off-chain to verify that it did indeed made such offer.\"}},\"notice\":\"Helper contract for NFTfi. This contract manages externally verifying signatures from off-chain NFTfi orders.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/NFTfiSigningUtilsContract.sol\":\"NFTfiSigningUtilsContract\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\\n    }\\n}\\n\",\"keccak256\":\"0xc8add71d80d05a1390e1c656686a0ea10ffaebfcc433cc397a63fd725f376b7e\",\"license\":\"MIT\"},\"contracts/interfaces/IBundleBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\ninterface IBundleBuilder {\\n    /**\\n     * @notice data of a erc721 bundle element\\n     *\\n     * @param tokenContract - address of the token contract\\n     * @param id - id of the token\\n     * @param safeTransferable - wether the implementing token contract has a safeTransfer function or not\\n     */\\n    struct BundleElementERC721 {\\n        address tokenContract;\\n        uint256 id;\\n        bool safeTransferable;\\n    }\\n\\n    /**\\n     * @notice data of a erc20 bundle element\\n     *\\n     * @param tokenContract - address of the token contract\\n     * @param amount - amount of the token\\n     */\\n    struct BundleElementERC20 {\\n        address tokenContract;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @notice data of a erc20 bundle element\\n     *\\n     * @param tokenContract - address of the token contract\\n     * @param ids - list of ids of the tokens\\n     * @param amounts - list amounts of the tokens\\n     */\\n    struct BundleElementERC1155 {\\n        address tokenContract;\\n        uint256[] ids;\\n        uint256[] amounts;\\n    }\\n\\n    /**\\n     * @notice the lists of erc721-20-1155 tokens that are to be bundled\\n     *\\n     * @param erc721s list of erc721 tokens\\n     * @param erc20s list of erc20 tokens\\n     * @param erc1155s list of erc1155 tokens\\n     */\\n    struct BundleElements {\\n        BundleElementERC721[] erc721s;\\n        BundleElementERC20[] erc20s;\\n        BundleElementERC1155[] erc1155s;\\n    }\\n\\n    /**\\n     * @notice used by the loan contract to build a bundle from the BundleElements struct at the beginning of a loan,\\n     * returns the id of the created bundle\\n     *\\n     * @param _bundleElements - the lists of erc721-20-1155 tokens that are to be bundled\\n     * @param _sender sender of the tokens in the bundle - the borrower\\n     * @param _receiver receiver of the created bundle, normally the loan contract\\n     */\\n    function buildBundle(\\n        BundleElements memory _bundleElements,\\n        address _sender,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Remove all the children from the bundle\\n     * @dev This method may run out of gas if the list of children is too big. In that case, children can be removed\\n     *      individually.\\n     * @param _tokenId the id of the bundle\\n     * @param _receiver address of the receiver of the children\\n     */\\n    function decomposeBundle(uint256 _tokenId, address _receiver) external;\\n}\\n\",\"keccak256\":\"0x1d713506273bfd5119659bb6a1b52f4d4aa6665fd75a714a332c68640eba3e48\",\"license\":\"BUSL-1.1\"},\"contracts/loans/direct/loanTypes/LoanData.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title  LoanData\\n * @author NFTfi\\n * @notice An interface containg the main Loan struct shared by Direct Loans types.\\n */\\ninterface LoanData {\\n    /* ********** */\\n    /* DATA TYPES */\\n    /* ********** */\\n\\n    /**\\n     * @notice The main Loan Terms struct. This data is saved upon loan creation.\\n     *\\n     * @param loanERC20Denomination - The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * @param loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param maximumRepaymentAmount - The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * @param nftCollateralContract - The address of the the NFT collateral contract.\\n     * @param nftCollateralWrapper - The NFTfi wrapper of the NFT collateral contract.\\n     * @param nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * @param loanStartTime - The block.timestamp when the loan first began (measured in seconds).\\n     * @param loanDuration - The amount of time (measured in seconds) that can elapse before the lender can liquidate\\n     * the loan and seize the underlying collateral NFT.\\n     * @param loanInterestRateForDurationInBasisPoints - This is the interest rate (measured in basis points, e.g.\\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\\n     * is irrelevant so it should be set to 0.\\n     * @param loanAdminFeeInBasisPoints - The percent (measured in basis points) of the interest earned that will be\\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\\n     * earned.\\n     * @param borrower\\n     */\\n    struct LoanTerms {\\n        uint256 loanPrincipalAmount;\\n        uint256 maximumRepaymentAmount;\\n        uint256 nftCollateralId;\\n        address loanERC20Denomination;\\n        uint32 loanDuration;\\n        uint16 loanInterestRateForDurationInBasisPoints;\\n        uint16 loanAdminFeeInBasisPoints;\\n        address nftCollateralWrapper;\\n        uint64 loanStartTime;\\n        address nftCollateralContract;\\n        address borrower;\\n    }\\n\\n    /**\\n     * @notice Some extra Loan's settings struct. This data is saved upon loan creation.\\n     * We need this to avoid stack too deep errors.\\n     *\\n     * @param revenueSharePartner - The address of the partner that will receive the revenue share.\\n     * @param revenueShareInBasisPoints - The percent (measured in basis points) of the admin fee amount that will be\\n     * taken as a revenue share for a t\\n     * @param referralFeeInBasisPoints - The percent (measured in basis points) of the loan principal amount that will\\n     * be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.he partner, at the moment\\n     * the loan is begun.\\n     */\\n    struct LoanExtras {\\n        address revenueSharePartner;\\n        uint16 revenueShareInBasisPoints;\\n        uint16 referralFeeInBasisPoints;\\n    }\\n\\n    /**\\n     * @notice The offer made by the lender. Used as parameter on both acceptOffer (initiated by the borrower) and\\n     * acceptListing (initiated by the lender).\\n     *\\n     * @param loanERC20Denomination - The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * @param loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param maximumRepaymentAmount - The maximum amount of money that the borrower would be required to retrieve their\\n     *  collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always\\n     * have to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * @param nftCollateralContract - The address of the ERC721 contract of the NFT collateral.\\n     * @param nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * @param referrer - The address of the referrer who found the lender matching the listing, Zero address to signal\\n     * this there is no referrer.\\n     * @param loanDuration - The amount of time (measured in seconds) that can elapse before the lender can liquidate\\n     * the loan and seize the underlying collateral NFT.\\n     * @param loanAdminFeeInBasisPoints - The percent (measured in basis points) of the interest earned that will be\\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\\n     * earned.\\n     */\\n    struct Offer {\\n        uint256 loanPrincipalAmount;\\n        uint256 maximumRepaymentAmount;\\n        uint256 nftCollateralId;\\n        address nftCollateralContract;\\n        uint32 loanDuration;\\n        uint16 loanAdminFeeInBasisPoints;\\n        address loanERC20Denomination;\\n        address referrer;\\n    }\\n\\n    /**\\n     * @notice Signature related params. Used as parameter on both acceptOffer (containing borrower signature) and\\n     * acceptListing (containing lender signature).\\n     *\\n     * @param signer - The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\\n     * @param nonce - The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\\n     * that nonce.\\n     * @param expiry - Date when the signature expires\\n     * @param signature - The ECDSA signature of the borrower or the lender, obtained off-chain ahead of time, signing\\n     * the following combination of parameters:\\n     * - Borrower\\n     *   - ListingTerms.loanERC20Denomination,\\n     *   - ListingTerms.minLoanPrincipalAmount,\\n     *   - ListingTerms.maxLoanPrincipalAmount,\\n     *   - ListingTerms.nftCollateralContract,\\n     *   - ListingTerms.nftCollateralId,\\n     *   - ListingTerms.revenueSharePartner,\\n     *   - ListingTerms.minLoanDuration,\\n     *   - ListingTerms.maxLoanDuration,\\n     *   - ListingTerms.maxInterestRateForDurationInBasisPoints,\\n     *   - ListingTerms.referralFeeInBasisPoints,\\n     *   - Signature.signer,\\n     *   - Signature.nonce,\\n     *   - Signature.expiry,\\n     *   - address of the loan type contract\\n     *   - chainId\\n     * - Lender:\\n     *   - Offer.loanERC20Denomination\\n     *   - Offer.loanPrincipalAmount\\n     *   - Offer.maximumRepaymentAmount\\n     *   - Offer.nftCollateralContract\\n     *   - Offer.nftCollateralId\\n     *   - Offer.referrer\\n     *   - Offer.loanDuration\\n     *   - Offer.loanAdminFeeInBasisPoints\\n     *   - Signature.signer,\\n     *   - Signature.nonce,\\n     *   - Signature.expiry,\\n     *   - address of the loan type contract\\n     *   - chainId\\n     */\\n    struct Signature {\\n        uint256 nonce;\\n        uint256 expiry;\\n        address signer;\\n        bytes signature;\\n    }\\n\\n    /**\\n     * @notice Some extra parameters that the borrower needs to set when accepting an offer.\\n     *\\n     * @param revenueSharePartner - The address of the partner that will receive the revenue share.\\n     * @param referralFeeInBasisPoints - The percent (measured in basis points) of the loan principal amount that will\\n     * be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\\n     */\\n    struct BorrowerSettings {\\n        address revenueSharePartner;\\n        uint16 referralFeeInBasisPoints;\\n    }\\n\\n    /**\\n     * @notice Terms the borrower set off-chain and is willing to accept automatically when fulfiled by a lender's\\n     * offer.\\n     *\\n     * @param loanERC20Denomination - The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * @param minLoanPrincipalAmount - The minumum sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param maxLoanPrincipalAmount - The  sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param maximumRepaymentAmount - The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * @param nftCollateralContract - The address of the ERC721 contract of the NFT collateral.\\n     * @param nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * @param revenueSharePartner - The address of the partner that will receive the revenue share.\\n     * @param minLoanDuration - The minumum amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * @param maxLoanDuration - The maximum amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * @param maxInterestRateForDurationInBasisPoints - This is maximum the interest rate (measured in basis points,\\n     * e.g. hundreths of a percent) for the loan.\\n     * @param referralFeeInBasisPoints - The percent (measured in basis points) of the loan principal amount that will\\n     * be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\\n     */\\n    struct ListingTerms {\\n        uint256 minLoanPrincipalAmount;\\n        uint256 maxLoanPrincipalAmount;\\n        uint256 nftCollateralId;\\n        address nftCollateralContract;\\n        uint32 minLoanDuration;\\n        uint32 maxLoanDuration;\\n        uint16 maxInterestRateForDurationInBasisPoints;\\n        uint16 referralFeeInBasisPoints;\\n        address revenueSharePartner;\\n        address loanERC20Denomination;\\n    }\\n}\\n\",\"keccak256\":\"0x1d2c0ce1b56a119665c118d44f7a210ec3f576f55e25808823b74ac72fab4fc9\",\"license\":\"BUSL-1.1\"},\"contracts/utils/NFTfiSigningUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/IBundleBuilder.sol\\\";\\nimport \\\"../loans/direct/loanTypes/LoanData.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\n/**\\n * @title  NFTfiSigningUtils\\n * @author NFTfi\\n * @notice Helper contract for NFTfi. This contract manages verifying signatures from off-chain NFTfi orders.\\n * Based on the version of this same contract used on NFTfi V1\\n */\\nlibrary NFTfiSigningUtils {\\n    /* ********* */\\n    /* FUNCTIONS */\\n    /* ********* */\\n\\n    /**\\n     * @dev This function gets the current chain ID.\\n     */\\n    function getChainID() public view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * @notice This function is when the lender accepts a borrower's binding listing terms, to validate the lender's\\n     * signature that the borrower provided off-chain to verify that it did indeed made such listing.\\n     *\\n     * @param _listingTerms - The listing terms struct containing:\\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * - minLoanPrincipalAmount: The minumum sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * - maxLoanPrincipalAmount: The  sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * - revenueSharePartner: The address of the partner that will receive the revenue share.\\n     * - minLoanDuration: The minumum amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * - maxLoanDuration: The maximum amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * - maxInterestRateForDurationInBasisPoints: This is maximum the interest rate (measured in basis points, e.g.\\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\\n     * is irrelevant so it should be set to 0.\\n     * - referralFeeInBasisPoints: The percent (measured in basis points) of the loan principal amount that will be\\n     * taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\\n     * @param _signature - The offer struct containing:\\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     *   - Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     * - expiry: Date when the signature expires\\n     * - signature: The ECDSA signature of the borrower, obtained off-chain ahead of time, signing the following\\n     * combination of parameters:\\n     *   - listingTerms.loanERC20Denomination,\\n     *   - listingTerms.minLoanPrincipalAmount,\\n     *   - listingTerms.maxLoanPrincipalAmount,\\n     *   - listingTerms.nftCollateralContract,\\n     *   - listingTerms.nftCollateralId,\\n     *   - listingTerms.revenueSharePartner,\\n     *   - listingTerms.minLoanDuration,\\n     *   - listingTerms.maxLoanDuration,\\n     *   - listingTerms.maxInterestRateForDurationInBasisPoints,\\n     *   - listingTerms.referralFeeInBasisPoints,\\n     *   - signature.signer,\\n     *   - signature.nonce,\\n     *   - signature.expiry,\\n     *   - address of this contract\\n     *   - chainId\\n     */\\n    function isValidBorrowerSignature(LoanData.ListingTerms memory _listingTerms, LoanData.Signature memory _signature)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return isValidBorrowerSignature(_listingTerms, _signature, address(this));\\n    }\\n\\n    /**\\n     * @dev This function overload the previous function to allow the caller to specify the address of the contract\\n     *\\n     */\\n    function isValidBorrowerSignature(\\n        LoanData.ListingTerms memory _listingTerms,\\n        LoanData.Signature memory _signature,\\n        address _loanContract\\n    ) public view returns (bool) {\\n        require(block.timestamp <= _signature.expiry, \\\"Borrower Signature has expired\\\");\\n        require(_loanContract != address(0), \\\"Loan is zero address\\\");\\n        if (_signature.signer == address(0)) {\\n            return false;\\n        } else {\\n            bytes32 message = keccak256(\\n                abi.encodePacked(\\n                    getEncodedListing(_listingTerms),\\n                    getEncodedSignature(_signature),\\n                    _loanContract,\\n                    getChainID()\\n                )\\n            );\\n\\n            return\\n                SignatureChecker.isValidSignatureNow(\\n                    _signature.signer,\\n                    ECDSA.toEthSignedMessageHash(message),\\n                    _signature.signature\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice This function is when the lender accepts a borrower's binding listing terms, to validate the lender's\\n     * signature that the borrower provided off-chain to verify that it did indeed made such listing.\\n     *\\n     * @param _listingTerms - The listing terms struct containing:\\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * - minLoanPrincipalAmount: The minumum sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * - maxLoanPrincipalAmount: The  sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * - revenueSharePartner: The address of the partner that will receive the revenue share.\\n     * - minLoanDuration: The minumum amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * - maxLoanDuration: The maximum amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * - maxInterestRateForDurationInBasisPoints: This is maximum the interest rate (measured in basis points, e.g.\\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\\n     * is irrelevant so it should be set to 0.\\n     * - referralFeeInBasisPoints: The percent (measured in basis points) of the loan principal amount that will be\\n     * taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\\n     * @param _bundleElements - the lists of erc721-20-1155 tokens that are to be bundled\\n     * @param _signature - The offer struct containing:\\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     *   - Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     * - expiry: Date when the signature expires\\n     * - signature: The ECDSA signature of the borrower, obtained off-chain ahead of time, signing the following\\n     * combination of parameters:\\n     *   - listingTerms.loanERC20Denomination,\\n     *   - listingTerms.minLoanPrincipalAmount,\\n     *   - listingTerms.maxLoanPrincipalAmount,\\n     *   - listingTerms.nftCollateralContract,\\n     *   - listingTerms.nftCollateralId,\\n     *   - listingTerms.revenueSharePartner,\\n     *   - listingTerms.minLoanDuration,\\n     *   - listingTerms.maxLoanDuration,\\n     *   - listingTerms.maxInterestRateForDurationInBasisPoints,\\n     *   - listingTerms.referralFeeInBasisPoints,\\n     *   - bundleElements\\n     *   - signature.signer,\\n     *   - signature.nonce,\\n     *   - signature.expiry,\\n     *   - address of this contract\\n     *   - chainId\\n     */\\n    function isValidBorrowerSignatureBundle(\\n        LoanData.ListingTerms memory _listingTerms,\\n        IBundleBuilder.BundleElements memory _bundleElements,\\n        LoanData.Signature memory _signature\\n    ) external view returns (bool) {\\n        return isValidBorrowerSignatureBundle(_listingTerms, _bundleElements, _signature, address(this));\\n    }\\n\\n    /**\\n     * @dev This function overload the previous function to allow the caller to specify the address of the contract\\n     *\\n     */\\n    function isValidBorrowerSignatureBundle(\\n        LoanData.ListingTerms memory _listingTerms,\\n        IBundleBuilder.BundleElements memory _bundleElements,\\n        LoanData.Signature memory _signature,\\n        address _loanContract\\n    ) public view returns (bool) {\\n        require(block.timestamp <= _signature.expiry, \\\"Borrower Signature has expired\\\");\\n        require(_loanContract != address(0), \\\"Loan is zero address\\\");\\n        if (_signature.signer == address(0)) {\\n            return false;\\n        } else {\\n            bytes32 message = keccak256(\\n                abi.encodePacked(\\n                    getEncodedListing(_listingTerms),\\n                    abi.encode(_bundleElements),\\n                    getEncodedSignature(_signature),\\n                    _loanContract,\\n                    getChainID()\\n                )\\n            );\\n\\n            return\\n                SignatureChecker.isValidSignatureNow(\\n                    _signature.signer,\\n                    ECDSA.toEthSignedMessageHash(message),\\n                    _signature.signature\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice This function is when the borrower accepts a lender's offer, to validate the lender's signature that the\\n     * lender provided off-chain to verify that it did indeed made such offer.\\n     *\\n     * @param _offer - The offer struct containing:\\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * - loanPrincipalAmount: The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * - referrer: The address of the referrer who found the lender matching the listing, Zero address to signal\\n     * this there is no referrer.\\n     * - loanDuration: The amount of time (measured in seconds) that can elapse before the lender can liquidate the\\n     * loan and seize the underlying collateral NFT.\\n     * - loanInterestRateForDurationInBasisPoints: This is the interest rate (measured in basis points, e.g.\\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\\n     * is irrelevant so it should be set to 0.\\n     * - loanAdminFeeInBasisPoints: The percent (measured in basis points) of the interest earned that will be\\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\\n     * earned.\\n     * @param _signature - The signature structure containing:\\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     *   - Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     * - expiry: Date when the signature expires\\n     * - signature: The ECDSA signature of the lender, obtained off-chain ahead of time, signing the following\\n     * combination of parameters:\\n     *   - offer.loanERC20Denomination\\n     *   - offer.loanPrincipalAmount\\n     *   - offer.maximumRepaymentAmount\\n     *   - offer.nftCollateralContract\\n     *   - offer.nftCollateralId\\n     *   - offer.referrer\\n     *   - offer.loanDuration\\n     *   - offer.loanAdminFeeInBasisPoints\\n     *   - signature.signer,\\n     *   - signature.nonce,\\n     *   - signature.expiry,\\n     *   - address of this contract\\n     *   - chainId\\n     */\\n    function isValidLenderSignature(LoanData.Offer memory _offer, LoanData.Signature memory _signature)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return isValidLenderSignature(_offer, _signature, address(this));\\n    }\\n\\n    /**\\n     * @dev This function overload the previous function to allow the caller to specify the address of the contract\\n     *\\n     */\\n    function isValidLenderSignature(\\n        LoanData.Offer memory _offer,\\n        LoanData.Signature memory _signature,\\n        address _loanContract\\n    ) public view returns (bool) {\\n        require(block.timestamp <= _signature.expiry, \\\"Lender Signature has expired\\\");\\n        require(_loanContract != address(0), \\\"Loan is zero address\\\");\\n        if (_signature.signer == address(0)) {\\n            return false;\\n        } else {\\n            bytes32 message = keccak256(\\n                abi.encodePacked(getEncodedOffer(_offer), getEncodedSignature(_signature), _loanContract, getChainID())\\n            );\\n\\n            return\\n                SignatureChecker.isValidSignatureNow(\\n                    _signature.signer,\\n                    ECDSA.toEthSignedMessageHash(message),\\n                    _signature.signature\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice This function is when the borrower accepts a lender's offer, to validate the lender's signature that the\\n     * lender provided off-chain to verify that it did indeed made such offer.\\n     *\\n     * @param _offer - The offer struct containing:\\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * - loanPrincipalAmount: The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * - referrer: The address of the referrer who found the lender matching the listing, Zero address to signal\\n     * this there is no referrer.\\n     * - loanDuration: The amount of time (measured in seconds) that can elapse before the lender can liquidate the\\n     * loan and seize the underlying collateral NFT.\\n     * - loanInterestRateForDurationInBasisPoints: This is the interest rate (measured in basis points, e.g.\\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\\n     * is irrelevant so it should be set to 0.\\n     * - loanAdminFeeInBasisPoints: The percent (measured in basis points) of the interest earned that will be\\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\\n     * earned.\\n     * @param _bundleElements - the lists of erc721-20-1155 tokens that are to be bundled\\n     * @param _signature - The signature structure containing:\\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     *   - Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     * - expiry: Date when the signature expires\\n     * - signature: The ECDSA signature of the lender, obtained off-chain ahead of time, signing the following\\n     * combination of parameters:\\n     *   - offer.loanERC20Denomination\\n     *   - offer.loanPrincipalAmount\\n     *   - offer.maximumRepaymentAmount\\n     *   - offer.nftCollateralContract\\n     *   - offer.nftCollateralId\\n     *   - offer.referrer\\n     *   - offer.loanDuration\\n     *   - offer.loanAdminFeeInBasisPoints\\n     *   - bundleElements\\n     *   - signature.signer,\\n     *   - signature.nonce,\\n     *   - signature.expiry,\\n     *   - address of this contract\\n     *   - chainId\\n     */\\n    function isValidLenderSignatureBundle(\\n        LoanData.Offer memory _offer,\\n        IBundleBuilder.BundleElements memory _bundleElements,\\n        LoanData.Signature memory _signature\\n    ) external view returns (bool) {\\n        return isValidLenderSignatureBundle(_offer, _bundleElements, _signature, address(this));\\n    }\\n\\n    /**\\n     * @dev This function overload the previous function to allow the caller to specify the address of the contract\\n     *\\n     */\\n    function isValidLenderSignatureBundle(\\n        LoanData.Offer memory _offer,\\n        IBundleBuilder.BundleElements memory _bundleElements,\\n        LoanData.Signature memory _signature,\\n        address _loanContract\\n    ) public view returns (bool) {\\n        require(block.timestamp <= _signature.expiry, \\\"Lender Signature has expired\\\");\\n        require(_loanContract != address(0), \\\"Loan is zero address\\\");\\n        if (_signature.signer == address(0)) {\\n            return false;\\n        } else {\\n            bytes32 message = keccak256(\\n                abi.encodePacked(\\n                    getEncodedOffer(_offer),\\n                    abi.encode(_bundleElements),\\n                    getEncodedSignature(_signature),\\n                    _loanContract,\\n                    getChainID()\\n                )\\n            );\\n\\n            return\\n                SignatureChecker.isValidSignatureNow(\\n                    _signature.signer,\\n                    ECDSA.toEthSignedMessageHash(message),\\n                    _signature.signature\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice This function is called in renegotiateLoan() to validate the lender's signature that the lender provided\\n     * off-chain to verify that they did indeed want to agree to this loan renegotiation according to these terms.\\n     *\\n     * @param _loanId - The unique identifier for the loan to be renegotiated\\n     * @param _newLoanDuration - The new amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * @param _newMaximumRepaymentAmount - The new maximum amount of money that the borrower would be required to\\n     * retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The\\n     * borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay\\n     * early.\\n     * @param _renegotiationFee Agreed upon fee in ether that borrower pays for the lender for the renegitiation\\n     * @param _signature - The signature structure containing:\\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\\n     * that nonce.\\n     * - expiry - The date when the renegotiation offer expires\\n     * - lenderSignature - The ECDSA signature of the lender, obtained off-chain ahead of time, signing the\\n     * following combination of parameters:\\n     * - _loanId\\n     * - _newLoanDuration\\n     * - _newMaximumRepaymentAmount\\n     * - _lender\\n     * - _lenderNonce\\n     * - _expiry\\n     * - address of this contract\\n     * - chainId\\n     */\\n    function isValidLenderRenegotiationSignature(\\n        uint256 _loanId,\\n        uint32 _newLoanDuration,\\n        uint256 _newMaximumRepaymentAmount,\\n        uint256 _renegotiationFee,\\n        LoanData.Signature memory _signature\\n    ) external view returns (bool) {\\n        return\\n            isValidLenderRenegotiationSignature(\\n                _loanId,\\n                _newLoanDuration,\\n                _newMaximumRepaymentAmount,\\n                _renegotiationFee,\\n                _signature,\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev This function overload the previous function to allow the caller to specify the address of the contract\\n     *\\n     */\\n    function isValidLenderRenegotiationSignature(\\n        uint256 _loanId,\\n        uint32 _newLoanDuration,\\n        uint256 _newMaximumRepaymentAmount,\\n        uint256 _renegotiationFee,\\n        LoanData.Signature memory _signature,\\n        address _loanContract\\n    ) public view returns (bool) {\\n        require(block.timestamp <= _signature.expiry, \\\"Renegotiation Signature has expired\\\");\\n        require(_loanContract != address(0), \\\"Loan is zero address\\\");\\n        if (_signature.signer == address(0)) {\\n            return false;\\n        } else {\\n            bytes32 message = keccak256(\\n                abi.encodePacked(\\n                    _loanId,\\n                    _newLoanDuration,\\n                    _newMaximumRepaymentAmount,\\n                    _renegotiationFee,\\n                    getEncodedSignature(_signature),\\n                    _loanContract,\\n                    getChainID()\\n                )\\n            );\\n\\n            return\\n                SignatureChecker.isValidSignatureNow(\\n                    _signature.signer,\\n                    ECDSA.toEthSignedMessageHash(message),\\n                    _signature.signature\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @dev We need this to avoid stack too deep errors.\\n     */\\n    function getEncodedListing(LoanData.ListingTerms memory _listingTerms) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _listingTerms.loanERC20Denomination,\\n                _listingTerms.minLoanPrincipalAmount,\\n                _listingTerms.maxLoanPrincipalAmount,\\n                _listingTerms.nftCollateralContract,\\n                _listingTerms.nftCollateralId,\\n                _listingTerms.revenueSharePartner,\\n                _listingTerms.minLoanDuration,\\n                _listingTerms.maxLoanDuration,\\n                _listingTerms.maxInterestRateForDurationInBasisPoints,\\n                _listingTerms.referralFeeInBasisPoints\\n            );\\n    }\\n\\n    /**\\n     * @dev We need this to avoid stack too deep errors.\\n     */\\n    function getEncodedOffer(LoanData.Offer memory _offer) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _offer.loanERC20Denomination,\\n                _offer.loanPrincipalAmount,\\n                _offer.maximumRepaymentAmount,\\n                _offer.nftCollateralContract,\\n                _offer.nftCollateralId,\\n                _offer.referrer,\\n                _offer.loanDuration,\\n                _offer.loanAdminFeeInBasisPoints\\n            );\\n    }\\n\\n    /**\\n     * @dev We need this to avoid stack too deep errors.\\n     */\\n    function getEncodedSignature(LoanData.Signature memory _signature) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_signature.signer, _signature.nonce, _signature.expiry);\\n    }\\n}\\n\",\"keccak256\":\"0x58d43044918491287dc3e741d85396fe0ff3c858a464e3cef519888f28b74f54\",\"license\":\"BUSL-1.1\"},\"contracts/utils/NFTfiSigningUtilsContract.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./NFTfiSigningUtils.sol\\\";\\n\\n/**\\n * @title  NFTfiSigningUtilsContract\\n * @author NFTfi\\n * @notice Helper contract for NFTfi. This contract manages externally verifying signatures from off-chain NFTfi orders.\\n */\\ncontract NFTfiSigningUtilsContract {\\n    /* ********* */\\n    /* FUNCTIONS */\\n    /* ********* */\\n\\n    /**\\n     * @notice This function is when the lender accepts a borrower's binding listing terms, to validate the lender's\\n     * signature that the borrower provided off-chain to verify that it did indeed made such listing.\\n     *\\n     * @param _listingTerms - The listing terms struct containing:\\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * - minLoanPrincipalAmount: The minumum sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * - maxLoanPrincipalAmount: The  sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * - revenueSharePartner: The address of the partner that will receive the revenue share.\\n     * - minLoanDuration: The minumum amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * - maxLoanDuration: The maximum amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * - maxInterestRateForDurationInBasisPoints: This is maximum the interest rate (measured in basis points, e.g.\\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\\n     * is irrelevant so it should be set to 0.\\n     * - referralFeeInBasisPoints: The percent (measured in basis points) of the loan principal amount that will be\\n     * taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\\n     * @param _signature - The offer struct containing:\\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     *   - Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     * - expiry: Date when the signature expires\\n     * - signature: The ECDSA signature of the borrower, obtained off-chain ahead of time, signing the following\\n     * combination of parameters:\\n     *   - listingTerms.loanERC20Denomination,\\n     *   - listingTerms.minLoanPrincipalAmount,\\n     *   - listingTerms.maxLoanPrincipalAmount,\\n     *   - listingTerms.nftCollateralContract,\\n     *   - listingTerms.nftCollateralId,\\n     *   - listingTerms.revenueSharePartner,\\n     *   - listingTerms.minLoanDuration,\\n     *   - listingTerms.maxLoanDuration,\\n     *   - listingTerms.maxInterestRateForDurationInBasisPoints,\\n     *   - listingTerms.referralFeeInBasisPoints,\\n     *   - signature.signer,\\n     *   - signature.nonce,\\n     *   - signature.expiry,\\n     *   - loan contract address,\\n     *   - chainId\\n     * @param _loanContract - Address of the loan contract where the signature is going to be used\\n     */\\n    function isValidBorrowerSignature(\\n        LoanData.ListingTerms memory _listingTerms,\\n        LoanData.Signature memory _signature,\\n        address _loanContract\\n    ) external view returns (bool) {\\n        return NFTfiSigningUtils.isValidBorrowerSignature(_listingTerms, _signature, _loanContract);\\n    }\\n\\n    /**\\n     * @notice This function is when the lender accepts a borrower's binding listing terms, to validate the lender's\\n     * signature that the borrower provided off-chain to verify that it did indeed made such listing.\\n     *\\n     * @param _listingTerms - The listing terms struct containing:\\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * - minLoanPrincipalAmount: The minumum sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * - maxLoanPrincipalAmount: The  sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * - revenueSharePartner: The address of the partner that will receive the revenue share.\\n     * - minLoanDuration: The minumum amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * - maxLoanDuration: The maximum amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * - maxInterestRateForDurationInBasisPoints: This is maximum the interest rate (measured in basis points, e.g.\\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\\n     * is irrelevant so it should be set to 0.\\n     * - referralFeeInBasisPoints: The percent (measured in basis points) of the loan principal amount that will be\\n     * taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\\n     * @param _bundleElements - the lists of erc721-20-1155 tokens that are to be bundled\\n     * @param _signature - The offer struct containing:\\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     *   - Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     * - expiry: Date when the signature expires\\n     * - signature: The ECDSA signature of the borrower, obtained off-chain ahead of time, signing the following\\n     * combination of parameters:\\n     *   - listingTerms.loanERC20Denomination,\\n     *   - listingTerms.minLoanPrincipalAmount,\\n     *   - listingTerms.maxLoanPrincipalAmount,\\n     *   - listingTerms.nftCollateralContract,\\n     *   - listingTerms.nftCollateralId,\\n     *   - listingTerms.revenueSharePartner,\\n     *   - listingTerms.minLoanDuration,\\n     *   - listingTerms.maxLoanDuration,\\n     *   - listingTerms.maxInterestRateForDurationInBasisPoints,\\n     *   - listingTerms.referralFeeInBasisPoints,\\n     *   - bundleElements\\n     *   - signature.signer,\\n     *   - signature.nonce,\\n     *   - signature.expiry,\\n     *   - loan contract address,\\n     *   - chainId\\n     * @param _loanContract - Address of the loan contract where the signature is going to be used\\n     */\\n    function isValidBorrowerSignatureBundle(\\n        LoanData.ListingTerms memory _listingTerms,\\n        IBundleBuilder.BundleElements memory _bundleElements,\\n        LoanData.Signature memory _signature,\\n        address _loanContract\\n    ) external view returns (bool) {\\n        return\\n            NFTfiSigningUtils.isValidBorrowerSignatureBundle(_listingTerms, _bundleElements, _signature, _loanContract);\\n    }\\n\\n    /**\\n     * @notice This function is when the borrower accepts a lender's offer, to validate the lender's signature that the\\n     * lender provided off-chain to verify that it did indeed made such offer.\\n     *\\n     * @param _offer - The offer struct containing:\\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * - loanPrincipalAmount: The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * - referrer: The address of the referrer who found the lender matching the listing, Zero address to signal\\n     * this there is no referrer.\\n     * - loanDuration: The amount of time (measured in seconds) that can elapse before the lender can liquidate the\\n     * loan and seize the underlying collateral NFT.\\n     * - loanInterestRateForDurationInBasisPoints: This is the interest rate (measured in basis points, e.g.\\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\\n     * is irrelevant so it should be set to 0.\\n     * - loanAdminFeeInBasisPoints: The percent (measured in basis points) of the interest earned that will be\\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\\n     * earned.\\n     * @param _signature - The signature structure containing:\\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     *   - Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     * - expiry: Date when the signature expires\\n     * - signature: The ECDSA signature of the lender, obtained off-chain ahead of time, signing the following\\n     * combination of parameters:\\n     *   - offer.loanERC20Denomination\\n     *   - offer.loanPrincipalAmount\\n     *   - offer.maximumRepaymentAmount\\n     *   - offer.nftCollateralContract\\n     *   - offer.nftCollateralId\\n     *   - offer.referrer\\n     *   - offer.loanDuration\\n     *   - offer.loanAdminFeeInBasisPoints\\n     *   - signature.signer,\\n     *   - signature.nonce,\\n     *   - signature.expiry,\\n     *   - loan contract address,\\n     *   - chainId\\n     * @param _loanContract - Address of the loan contract where the signature is going to be used\\n     */\\n    function isValidLenderSignature(\\n        LoanData.Offer memory _offer,\\n        LoanData.Signature memory _signature,\\n        address _loanContract\\n    ) external view returns (bool) {\\n        return NFTfiSigningUtils.isValidLenderSignature(_offer, _signature, _loanContract);\\n    }\\n\\n    /**\\n     * @notice This function is when the borrower accepts a lender's offer, to validate the lender's signature that the\\n     * lender provided off-chain to verify that it did indeed made such offer.\\n     *\\n     * @param _offer - The offer struct containing:\\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * - loanPrincipalAmount: The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * - referrer: The address of the referrer who found the lender matching the listing, Zero address to signal\\n     * this there is no referrer.\\n     * - loanDuration: The amount of time (measured in seconds) that can elapse before the lender can liquidate the\\n     * loan and seize the underlying collateral NFT.\\n     * - loanInterestRateForDurationInBasisPoints: This is the interest rate (measured in basis points, e.g.\\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\\n     * is irrelevant so it should be set to 0.\\n     * - loanAdminFeeInBasisPoints: The percent (measured in basis points) of the interest earned that will be\\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\\n     * earned.\\n     * @param _bundleElements - the lists of erc721-20-1155 tokens that are to be bundled\\n     * @param _signature - The signature structure containing:\\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     *   - Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     * - expiry: Date when the signature expires\\n     * - signature: The ECDSA signature of the lender, obtained off-chain ahead of time, signing the following\\n     * combination of parameters:\\n     *   - offer.loanERC20Denomination\\n     *   - offer.loanPrincipalAmount\\n     *   - offer.maximumRepaymentAmount\\n     *   - offer.nftCollateralContract\\n     *   - offer.nftCollateralId\\n     *   - offer.referrer\\n     *   - offer.loanDuration\\n     *   - offer.loanAdminFeeInBasisPoints\\n     *   - bundleElements\\n     *   - signature.signer,\\n     *   - signature.nonce,\\n     *   - signature.expiry,\\n     *   - loan contract address,\\n     *   - chainId\\n     * @param _loanContract - Address of the loan contract where the signature is going to be used\\n     */\\n    function isValidLenderSignatureBundle(\\n        LoanData.Offer memory _offer,\\n        IBundleBuilder.BundleElements memory _bundleElements,\\n        LoanData.Signature memory _signature,\\n        address _loanContract\\n    ) external view returns (bool) {\\n        return NFTfiSigningUtils.isValidLenderSignatureBundle(_offer, _bundleElements, _signature, _loanContract);\\n    }\\n\\n    /**\\n     * @notice This function is called in renegotiateLoan() to validate the lender's signature that the lender provided\\n     * off-chain to verify that they did indeed want to agree to this loan renegotiation according to these terms.\\n     *\\n     * @param _loanId - The unique identifier for the loan to be renegotiated\\n     * @param _newLoanDuration - The new amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * @param _newMaximumRepaymentAmount - The new maximum amount of money that the borrower would be required to\\n     * retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The\\n     * borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay\\n     * early.\\n     * @param _renegotiationFee Agreed upon fee in ether that borrower pays for the lender for the renegitiation\\n     * @param _signature - The signature structure containing:\\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\\n     * that nonce.\\n     * - expiry - The date when the renegotiation offer expires\\n     * - lenderSignature - The ECDSA signature of the lender, obtained off-chain ahead of time, signing the\\n     * following combination of parameters:\\n     * - _loanId\\n     * - _newLoanDuration\\n     * - _newMaximumRepaymentAmount\\n     * - _lender\\n     * - _lenderNonce\\n     * - _expiry\\n     *  - loan contract address,\\n     * - chainId\\n     * @param _loanContract - Address of the loan contract where the signature is going to be used\\n     */\\n    function isValidLenderRenegotiationSignature(\\n        uint256 _loanId,\\n        uint32 _newLoanDuration,\\n        uint256 _newMaximumRepaymentAmount,\\n        uint256 _renegotiationFee,\\n        LoanData.Signature memory _signature,\\n        address _loanContract\\n    ) external view returns (bool) {\\n        return\\n            NFTfiSigningUtils.isValidLenderRenegotiationSignature(\\n                _loanId,\\n                _newLoanDuration,\\n                _newMaximumRepaymentAmount,\\n                _renegotiationFee,\\n                _signature,\\n                _loanContract\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x2452d37ce9dec6197ebaddeb2aea2e6845996696ac4d3ef84570ff87c8b8a9a2\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611083806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806360bd65251461005c57806379497af9146100835780639fd1eea614610096578063de8dadb6146100a9578063e325f48e146100bc575b600080fd5b61006f61006a366004610932565b6100cf565b604051901515815260200160405180910390f35b61006f6100913660046108ac565b610165565b61006f6100a4366004610a62565b6101fe565b61006f6100b7366004610a0c565b61029d565b61006f6100ca366004610991565b6102db565b60405163c421292160e01b81526000907360Da568b88037d0735715819a37714d28BD563479063c42129219061010d90879087908790600401610e57565b60206040518083038186803b15801561012557600080fd5b505af4158015610139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015d9190610889565b949350505050565b604051633ce5ed9f60e01b81526000907360Da568b88037d0735715819a37714d28BD5634790633ce5ed9f906101a5908890889088908890600401610e05565b60206040518083038186803b1580156101bd57600080fd5b505af41580156101d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f59190610889565b95945050505050565b6040516387c0a57360e01b81526000907360Da568b88037d0735715819a37714d28BD56347906387c0a57390610242908a908a908a908a908a908a90600401610f21565b60206040518083038186803b15801561025a57600080fd5b505af415801561026e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102929190610889565b979650505050505050565b6040516301aae07b60e61b81526000907360Da568b88037d0735715819a37714d28BD5634790636ab81ec09061010d90879087908790600401610ee5565b60405163540ccab760e11b81526000907360Da568b88037d0735715819a37714d28BD563479063a819956e906101a5908890889088908890600401610e93565b80356001600160a01b038116811461033257600080fd5b919050565b600082601f830112610347578081fd5b8135602061035c6103578361102c565b610ffc565b80838252828201915082860187848660051b890101111561037b578586fd5b855b858110156104255781356001600160401b038082111561039b578889fd5b908901906060828c03601f19018113156103b357898afd5b6103bb610f6d565b6103c689850161031b565b8152604080850135848111156103da578c8dfd5b6103e88f8c838901016104b8565b838c0152509184013591838311156103fe578b8cfd5b61040c8e8b858801016104b8565b908201528752505050928401929084019060010161037d565b5090979650505050505050565b600082601f830112610442578081fd5b813560206104526103578361102c565b80838252828201915082860187848660061b8901011115610471578586fd5b855b8581101561042557604080838b03121561048b578788fd5b610493610f95565b61049c8461031b565b8152838701358782015285529385019390910190600101610473565b600082601f8301126104c8578081fd5b813560206104d86103578361102c565b80838252828201915082860187848660051b89010111156104f7578586fd5b855b85811015610425578135845292840192908401906001016104f9565b60006060808385031215610527578182fd5b61052f610f6d565b915082356001600160401b038082111561054857600080fd5b818501915085601f83011261055c57600080fd5b8135602061056c6103578361102c565b82815281810190858301878502870184018b101561058957600080fd5b600096505b848710156105e75787818c0312156105a557600080fd5b6105ad610f6d565b6105b68261031b565b815284820135858201526040808301356105cf81611065565b9082015283526001969096019591830191870161058e565b50875250868101359450828511156105fe57600080fd5b61060a88868901610432565b9086015250604085013592508083111561062357600080fd5b505061063184828501610337565b60408301525092915050565b6000610140828403121561064f578081fd5b610657610fb7565b905081358152602082013560208201526040820135604082015261067d6060830161031b565b606082015261068e60808301610875565b608082015261069f60a08301610875565b60a08201526106b060c08301610863565b60c08201526106c160e08301610863565b60e08201526101006106d481840161031b565b908201526101206106e683820161031b565b9082015292915050565b6000610100808385031215610703578182fd5b604051908101906001600160401b03821181831017156107255761072561104f565b816040528092508335815260208401356020820152604084013560408201526107506060850161031b565b606082015261076160808501610875565b608082015261077260a08501610863565b60a082015261078360c0850161031b565b60c082015261079460e0850161031b565b60e0820152505092915050565b6000608082840312156107b2578081fd5b6107ba610fda565b905081358152602080830135818301526107d66040840161031b565b604083015260608301356001600160401b03808211156107f557600080fd5b818501915085601f83011261080957600080fd5b81358181111561081b5761081b61104f565b61082d601f8201601f19168501610ffc565b9150808252868482850101111561084357600080fd5b808484018584013760008482840101525080606085015250505092915050565b803561ffff8116811461033257600080fd5b803563ffffffff8116811461033257600080fd5b60006020828403121561089a578081fd5b81516108a581611065565b9392505050565b6000806000806101a085870312156108c2578283fd5b6108cc868661063d565b93506101408501356001600160401b03808211156108e8578485fd5b6108f488838901610515565b945061016087013591508082111561090a578384fd5b50610917878288016107a1565b925050610927610180860161031b565b905092959194509250565b60008060006101808486031215610947578081fd5b610951858561063d565b92506101408401356001600160401b0381111561096c578182fd5b610978868287016107a1565b925050610988610160850161031b565b90509250925092565b60008060008061016085870312156109a7578182fd5b6109b186866106f0565b93506101008501356001600160401b03808211156109cd578384fd5b6109d988838901610515565b94506101208701359150808211156109ef578384fd5b506109fc878288016107a1565b925050610927610140860161031b565b60008060006101408486031215610a21578081fd5b610a2b85856106f0565b92506101008401356001600160401b03811115610a46578182fd5b610a52868287016107a1565b925050610988610120850161031b565b60008060008060008060c08789031215610a7a578384fd5b86359550610a8a60208801610875565b9450604087013593506060870135925060808701356001600160401b03811115610ab2578283fd5b610abe89828a016107a1565b925050610acd60a0880161031b565b90509295509295509295565b600082825180855260208086019550808260051b840101818601855b8481101561042557858303601f19018952815180516001600160a01b0316845284810151606086860181905290610b2e82870182610bad565b91505060408083015192508582038187015250610b4b8183610bad565b9a86019a9450505090830190600101610af5565b6000815180845260208085019450808401835b83811015610ba257815180516001600160a01b031688528301518388015260409096019590820190600101610b72565b509495945050505050565b6000815180845260208085019450808401835b83811015610ba257815187529582019590820190600101610bc0565b805160608084528151848201819052600092602091908201906080870190855b81811015610c3757835180516001600160a01b0316845285810151868501526040908101511515908401529284019291850191600101610bfc565b505082860151935086810383880152610c508185610b5f565b9350505050604083015184820360408601526101f58282610ad9565b8051825260208101516020830152604081015160408301526060810151610c9e60608401826001600160a01b03169052565b506080810151610cb6608084018263ffffffff169052565b5060a0810151610cce60a084018263ffffffff169052565b5060c0810151610ce460c084018261ffff169052565b5060e0810151610cfa60e084018261ffff169052565b50610100818101516001600160a01b03908116918401919091526101209182015116910152565b805182526020810151602083015260408101516040830152606081015160018060a01b03808216606085015263ffffffff608084015116608085015261ffff60a08401511660a08501528060c08401511660c08501528060e08401511660e085015250505050565b8051825260006020808301518185015260018060a01b0360408401511660408501526060830151608060608601528051806080870152835b81811015610ddd5782810184015187820160a001528301610dc1565b81811115610dee578460a083890101525b50601f01601f19169490940160a001949350505050565b60006101a0610e148388610c6c565b80610140840152610e2781840187610bdc565b9050828103610160840152610e3c8186610d89565b91505060018060a01b03831661018083015295945050505050565b6000610180610e668387610c6c565b80610140840152610e7981840186610d89565b91505060018060a01b038316610160830152949350505050565b6000610160610ea28388610d21565b80610100840152610eb581840187610bdc565b9050828103610120840152610eca8186610d89565b91505060018060a01b03831661014083015295945050505050565b6000610140610ef48387610d21565b80610100840152610f0781840186610d89565b91505060018060a01b038316610120830152949350505050565b86815263ffffffff8616602082015284604082015283606082015260c060808201526000610f5260c0830185610d89565b905060018060a01b03831660a0830152979650505050505050565b604051606081016001600160401b0381118282101715610f8f57610f8f61104f565b60405290565b604080519081016001600160401b0381118282101715610f8f57610f8f61104f565b60405161014081016001600160401b0381118282101715610f8f57610f8f61104f565b604051608081016001600160401b0381118282101715610f8f57610f8f61104f565b604051601f8201601f191681016001600160401b03811182821017156110245761102461104f565b604052919050565b60006001600160401b038211156110455761104561104f565b5060051b60200190565b634e487b7160e01b600052604160045260246000fd5b801515811461107357600080fd5b5056fea164736f6c6343000804000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806360bd65251461005c57806379497af9146100835780639fd1eea614610096578063de8dadb6146100a9578063e325f48e146100bc575b600080fd5b61006f61006a366004610932565b6100cf565b604051901515815260200160405180910390f35b61006f6100913660046108ac565b610165565b61006f6100a4366004610a62565b6101fe565b61006f6100b7366004610a0c565b61029d565b61006f6100ca366004610991565b6102db565b60405163c421292160e01b815260009073__$07730b9b91c2b41a419f99961f709e7858$__9063c42129219061010d90879087908790600401610e57565b60206040518083038186803b15801561012557600080fd5b505af4158015610139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015d9190610889565b949350505050565b604051633ce5ed9f60e01b815260009073__$07730b9b91c2b41a419f99961f709e7858$__90633ce5ed9f906101a5908890889088908890600401610e05565b60206040518083038186803b1580156101bd57600080fd5b505af41580156101d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f59190610889565b95945050505050565b6040516387c0a57360e01b815260009073__$07730b9b91c2b41a419f99961f709e7858$__906387c0a57390610242908a908a908a908a908a908a90600401610f21565b60206040518083038186803b15801561025a57600080fd5b505af415801561026e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102929190610889565b979650505050505050565b6040516301aae07b60e61b815260009073__$07730b9b91c2b41a419f99961f709e7858$__90636ab81ec09061010d90879087908790600401610ee5565b60405163540ccab760e11b815260009073__$07730b9b91c2b41a419f99961f709e7858$__9063a819956e906101a5908890889088908890600401610e93565b80356001600160a01b038116811461033257600080fd5b919050565b600082601f830112610347578081fd5b8135602061035c6103578361102c565b610ffc565b80838252828201915082860187848660051b890101111561037b578586fd5b855b858110156104255781356001600160401b038082111561039b578889fd5b908901906060828c03601f19018113156103b357898afd5b6103bb610f6d565b6103c689850161031b565b8152604080850135848111156103da578c8dfd5b6103e88f8c838901016104b8565b838c0152509184013591838311156103fe578b8cfd5b61040c8e8b858801016104b8565b908201528752505050928401929084019060010161037d565b5090979650505050505050565b600082601f830112610442578081fd5b813560206104526103578361102c565b80838252828201915082860187848660061b8901011115610471578586fd5b855b8581101561042557604080838b03121561048b578788fd5b610493610f95565b61049c8461031b565b8152838701358782015285529385019390910190600101610473565b600082601f8301126104c8578081fd5b813560206104d86103578361102c565b80838252828201915082860187848660051b89010111156104f7578586fd5b855b85811015610425578135845292840192908401906001016104f9565b60006060808385031215610527578182fd5b61052f610f6d565b915082356001600160401b038082111561054857600080fd5b818501915085601f83011261055c57600080fd5b8135602061056c6103578361102c565b82815281810190858301878502870184018b101561058957600080fd5b600096505b848710156105e75787818c0312156105a557600080fd5b6105ad610f6d565b6105b68261031b565b815284820135858201526040808301356105cf81611065565b9082015283526001969096019591830191870161058e565b50875250868101359450828511156105fe57600080fd5b61060a88868901610432565b9086015250604085013592508083111561062357600080fd5b505061063184828501610337565b60408301525092915050565b6000610140828403121561064f578081fd5b610657610fb7565b905081358152602082013560208201526040820135604082015261067d6060830161031b565b606082015261068e60808301610875565b608082015261069f60a08301610875565b60a08201526106b060c08301610863565b60c08201526106c160e08301610863565b60e08201526101006106d481840161031b565b908201526101206106e683820161031b565b9082015292915050565b6000610100808385031215610703578182fd5b604051908101906001600160401b03821181831017156107255761072561104f565b816040528092508335815260208401356020820152604084013560408201526107506060850161031b565b606082015261076160808501610875565b608082015261077260a08501610863565b60a082015261078360c0850161031b565b60c082015261079460e0850161031b565b60e0820152505092915050565b6000608082840312156107b2578081fd5b6107ba610fda565b905081358152602080830135818301526107d66040840161031b565b604083015260608301356001600160401b03808211156107f557600080fd5b818501915085601f83011261080957600080fd5b81358181111561081b5761081b61104f565b61082d601f8201601f19168501610ffc565b9150808252868482850101111561084357600080fd5b808484018584013760008482840101525080606085015250505092915050565b803561ffff8116811461033257600080fd5b803563ffffffff8116811461033257600080fd5b60006020828403121561089a578081fd5b81516108a581611065565b9392505050565b6000806000806101a085870312156108c2578283fd5b6108cc868661063d565b93506101408501356001600160401b03808211156108e8578485fd5b6108f488838901610515565b945061016087013591508082111561090a578384fd5b50610917878288016107a1565b925050610927610180860161031b565b905092959194509250565b60008060006101808486031215610947578081fd5b610951858561063d565b92506101408401356001600160401b0381111561096c578182fd5b610978868287016107a1565b925050610988610160850161031b565b90509250925092565b60008060008061016085870312156109a7578182fd5b6109b186866106f0565b93506101008501356001600160401b03808211156109cd578384fd5b6109d988838901610515565b94506101208701359150808211156109ef578384fd5b506109fc878288016107a1565b925050610927610140860161031b565b60008060006101408486031215610a21578081fd5b610a2b85856106f0565b92506101008401356001600160401b03811115610a46578182fd5b610a52868287016107a1565b925050610988610120850161031b565b60008060008060008060c08789031215610a7a578384fd5b86359550610a8a60208801610875565b9450604087013593506060870135925060808701356001600160401b03811115610ab2578283fd5b610abe89828a016107a1565b925050610acd60a0880161031b565b90509295509295509295565b600082825180855260208086019550808260051b840101818601855b8481101561042557858303601f19018952815180516001600160a01b0316845284810151606086860181905290610b2e82870182610bad565b91505060408083015192508582038187015250610b4b8183610bad565b9a86019a9450505090830190600101610af5565b6000815180845260208085019450808401835b83811015610ba257815180516001600160a01b031688528301518388015260409096019590820190600101610b72565b509495945050505050565b6000815180845260208085019450808401835b83811015610ba257815187529582019590820190600101610bc0565b805160608084528151848201819052600092602091908201906080870190855b81811015610c3757835180516001600160a01b0316845285810151868501526040908101511515908401529284019291850191600101610bfc565b505082860151935086810383880152610c508185610b5f565b9350505050604083015184820360408601526101f58282610ad9565b8051825260208101516020830152604081015160408301526060810151610c9e60608401826001600160a01b03169052565b506080810151610cb6608084018263ffffffff169052565b5060a0810151610cce60a084018263ffffffff169052565b5060c0810151610ce460c084018261ffff169052565b5060e0810151610cfa60e084018261ffff169052565b50610100818101516001600160a01b03908116918401919091526101209182015116910152565b805182526020810151602083015260408101516040830152606081015160018060a01b03808216606085015263ffffffff608084015116608085015261ffff60a08401511660a08501528060c08401511660c08501528060e08401511660e085015250505050565b8051825260006020808301518185015260018060a01b0360408401511660408501526060830151608060608601528051806080870152835b81811015610ddd5782810184015187820160a001528301610dc1565b81811115610dee578460a083890101525b50601f01601f19169490940160a001949350505050565b60006101a0610e148388610c6c565b80610140840152610e2781840187610bdc565b9050828103610160840152610e3c8186610d89565b91505060018060a01b03831661018083015295945050505050565b6000610180610e668387610c6c565b80610140840152610e7981840186610d89565b91505060018060a01b038316610160830152949350505050565b6000610160610ea28388610d21565b80610100840152610eb581840187610bdc565b9050828103610120840152610eca8186610d89565b91505060018060a01b03831661014083015295945050505050565b6000610140610ef48387610d21565b80610100840152610f0781840186610d89565b91505060018060a01b038316610120830152949350505050565b86815263ffffffff8616602082015284604082015283606082015260c060808201526000610f5260c0830185610d89565b905060018060a01b03831660a0830152979650505050505050565b604051606081016001600160401b0381118282101715610f8f57610f8f61104f565b60405290565b604080519081016001600160401b0381118282101715610f8f57610f8f61104f565b60405161014081016001600160401b0381118282101715610f8f57610f8f61104f565b604051608081016001600160401b0381118282101715610f8f57610f8f61104f565b604051601f8201601f191681016001600160401b03811182821017156110245761102461104f565b604052919050565b60006001600160401b038211156110455761104561104f565b5060051b60200190565b634e487b7160e01b600052604160045260246000fd5b801515811461107357600080fd5b5056fea164736f6c6343000804000a",
  "libraries": {
    "NFTfiSigningUtils": "0x60Da568b88037d0735715819a37714d28BD56347"
  },
  "devdoc": {
    "author": "NFTfi",
    "kind": "dev",
    "methods": {
      "isValidBorrowerSignature((uint256,uint256,uint256,address,uint32,uint32,uint16,uint16,address,address),(uint256,uint256,address,bytes),address)": {
        "params": {
          "_listingTerms": "- The listing terms struct containing: - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest for this loan. - minLoanPrincipalAmount: The minumum sum of money transferred from lender to borrower at the beginning of the loan, measured in loanERC20Denomination's smallest units. - maxLoanPrincipalAmount: The  sum of money transferred from lender to borrower at the beginning of the loan, measured in loanERC20Denomination's smallest units. - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay early. - nftCollateralContract: The address of the ERC721 contract of the NFT collateral. - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this loan. The NFT is stored within this contract during the duration of the loan. - revenueSharePartner: The address of the partner that will receive the revenue share. - minLoanDuration: The minumum amount of time (measured in seconds) that can elapse before the lender can liquidate the loan and seize the underlying collateral NFT. - maxLoanDuration: The maximum amount of time (measured in seconds) that can elapse before the lender can liquidate the loan and seize the underlying collateral NFT. - maxInterestRateForDurationInBasisPoints: This is maximum the interest rate (measured in basis points, e.g. hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and is irrelevant so it should be set to 0. - referralFeeInBasisPoints: The percent (measured in basis points) of the loan principal amount that will be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.",
          "_loanContract": "- Address of the loan contract where the signature is going to be used",
          "_signature": "- The offer struct containing: - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`. - nonce: The nonce referred here is not the same as an Ethereum account's nonce. We are referring instead to a nonce that is used by the lender or the borrower when they are first signing off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes:   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.   - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce. - expiry: Date when the signature expires - signature: The ECDSA signature of the borrower, obtained off-chain ahead of time, signing the following combination of parameters:   - listingTerms.loanERC20Denomination,   - listingTerms.minLoanPrincipalAmount,   - listingTerms.maxLoanPrincipalAmount,   - listingTerms.nftCollateralContract,   - listingTerms.nftCollateralId,   - listingTerms.revenueSharePartner,   - listingTerms.minLoanDuration,   - listingTerms.maxLoanDuration,   - listingTerms.maxInterestRateForDurationInBasisPoints,   - listingTerms.referralFeeInBasisPoints,   - signature.signer,   - signature.nonce,   - signature.expiry,   - loan contract address,   - chainId"
        }
      },
      "isValidBorrowerSignatureBundle((uint256,uint256,uint256,address,uint32,uint32,uint16,uint16,address,address),((address,uint256,bool)[],(address,uint256)[],(address,uint256[],uint256[])[]),(uint256,uint256,address,bytes),address)": {
        "params": {
          "_bundleElements": "- the lists of erc721-20-1155 tokens that are to be bundled",
          "_listingTerms": "- The listing terms struct containing: - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest for this loan. - minLoanPrincipalAmount: The minumum sum of money transferred from lender to borrower at the beginning of the loan, measured in loanERC20Denomination's smallest units. - maxLoanPrincipalAmount: The  sum of money transferred from lender to borrower at the beginning of the loan, measured in loanERC20Denomination's smallest units. - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay early. - nftCollateralContract: The address of the ERC721 contract of the NFT collateral. - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this loan. The NFT is stored within this contract during the duration of the loan. - revenueSharePartner: The address of the partner that will receive the revenue share. - minLoanDuration: The minumum amount of time (measured in seconds) that can elapse before the lender can liquidate the loan and seize the underlying collateral NFT. - maxLoanDuration: The maximum amount of time (measured in seconds) that can elapse before the lender can liquidate the loan and seize the underlying collateral NFT. - maxInterestRateForDurationInBasisPoints: This is maximum the interest rate (measured in basis points, e.g. hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and is irrelevant so it should be set to 0. - referralFeeInBasisPoints: The percent (measured in basis points) of the loan principal amount that will be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.",
          "_loanContract": "- Address of the loan contract where the signature is going to be used",
          "_signature": "- The offer struct containing: - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`. - nonce: The nonce referred here is not the same as an Ethereum account's nonce. We are referring instead to a nonce that is used by the lender or the borrower when they are first signing off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes:   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.   - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce. - expiry: Date when the signature expires - signature: The ECDSA signature of the borrower, obtained off-chain ahead of time, signing the following combination of parameters:   - listingTerms.loanERC20Denomination,   - listingTerms.minLoanPrincipalAmount,   - listingTerms.maxLoanPrincipalAmount,   - listingTerms.nftCollateralContract,   - listingTerms.nftCollateralId,   - listingTerms.revenueSharePartner,   - listingTerms.minLoanDuration,   - listingTerms.maxLoanDuration,   - listingTerms.maxInterestRateForDurationInBasisPoints,   - listingTerms.referralFeeInBasisPoints,   - bundleElements   - signature.signer,   - signature.nonce,   - signature.expiry,   - loan contract address,   - chainId"
        }
      },
      "isValidLenderRenegotiationSignature(uint256,uint32,uint256,uint256,(uint256,uint256,address,bytes),address)": {
        "params": {
          "_loanContract": "- Address of the loan contract where the signature is going to be used",
          "_loanId": "- The unique identifier for the loan to be renegotiated",
          "_newLoanDuration": "- The new amount of time (measured in seconds) that can elapse before the lender can liquidate the loan and seize the underlying collateral NFT.",
          "_newMaximumRepaymentAmount": "- The new maximum amount of money that the borrower would be required to retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay early.",
          "_renegotiationFee": "Agreed upon fee in ether that borrower pays for the lender for the renegitiation",
          "_signature": "- The signature structure containing: - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`. - nonce: The nonce referred here is not the same as an Ethereum account's nonce. We are referring instead to a nonce that is used by the lender or the borrower when they are first signing off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes: - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once. - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun() , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce. - expiry - The date when the renegotiation offer expires - lenderSignature - The ECDSA signature of the lender, obtained off-chain ahead of time, signing the following combination of parameters: - _loanId - _newLoanDuration - _newMaximumRepaymentAmount - _lender - _lenderNonce - _expiry  - loan contract address, - chainId"
        }
      },
      "isValidLenderSignature((uint256,uint256,uint256,address,uint32,uint16,address,address),(uint256,uint256,address,bytes),address)": {
        "params": {
          "_loanContract": "- Address of the loan contract where the signature is going to be used",
          "_offer": "- The offer struct containing: - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest for this loan. - loanPrincipalAmount: The original sum of money transferred from lender to borrower at the beginning of the loan, measured in loanERC20Denomination's smallest units. - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay early. - nftCollateralContract: The address of the ERC721 contract of the NFT collateral. - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this loan. The NFT is stored within this contract during the duration of the loan. - referrer: The address of the referrer who found the lender matching the listing, Zero address to signal this there is no referrer. - loanDuration: The amount of time (measured in seconds) that can elapse before the lender can liquidate the loan and seize the underlying collateral NFT. - loanInterestRateForDurationInBasisPoints: This is the interest rate (measured in basis points, e.g. hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and is irrelevant so it should be set to 0. - loanAdminFeeInBasisPoints: The percent (measured in basis points) of the interest earned that will be taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest earned.",
          "_signature": "- The signature structure containing: - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`. - nonce: The nonce referred here is not the same as an Ethereum account's nonce. We are referring instead to a nonce that is used by the lender or the borrower when they are first signing off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes:   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.   - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce. - expiry: Date when the signature expires - signature: The ECDSA signature of the lender, obtained off-chain ahead of time, signing the following combination of parameters:   - offer.loanERC20Denomination   - offer.loanPrincipalAmount   - offer.maximumRepaymentAmount   - offer.nftCollateralContract   - offer.nftCollateralId   - offer.referrer   - offer.loanDuration   - offer.loanAdminFeeInBasisPoints   - signature.signer,   - signature.nonce,   - signature.expiry,   - loan contract address,   - chainId"
        }
      },
      "isValidLenderSignatureBundle((uint256,uint256,uint256,address,uint32,uint16,address,address),((address,uint256,bool)[],(address,uint256)[],(address,uint256[],uint256[])[]),(uint256,uint256,address,bytes),address)": {
        "params": {
          "_bundleElements": "- the lists of erc721-20-1155 tokens that are to be bundled",
          "_loanContract": "- Address of the loan contract where the signature is going to be used",
          "_offer": "- The offer struct containing: - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest for this loan. - loanPrincipalAmount: The original sum of money transferred from lender to borrower at the beginning of the loan, measured in loanERC20Denomination's smallest units. - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay early. - nftCollateralContract: The address of the ERC721 contract of the NFT collateral. - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this loan. The NFT is stored within this contract during the duration of the loan. - referrer: The address of the referrer who found the lender matching the listing, Zero address to signal this there is no referrer. - loanDuration: The amount of time (measured in seconds) that can elapse before the lender can liquidate the loan and seize the underlying collateral NFT. - loanInterestRateForDurationInBasisPoints: This is the interest rate (measured in basis points, e.g. hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and is irrelevant so it should be set to 0. - loanAdminFeeInBasisPoints: The percent (measured in basis points) of the interest earned that will be taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest earned.",
          "_signature": "- The signature structure containing: - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`. - nonce: The nonce referred here is not the same as an Ethereum account's nonce. We are referring instead to a nonce that is used by the lender or the borrower when they are first signing off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes:   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.   - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce. - expiry: Date when the signature expires - signature: The ECDSA signature of the lender, obtained off-chain ahead of time, signing the following combination of parameters:   - offer.loanERC20Denomination   - offer.loanPrincipalAmount   - offer.maximumRepaymentAmount   - offer.nftCollateralContract   - offer.nftCollateralId   - offer.referrer   - offer.loanDuration   - offer.loanAdminFeeInBasisPoints   - bundleElements   - signature.signer,   - signature.nonce,   - signature.expiry,   - loan contract address,   - chainId"
        }
      }
    },
    "title": "NFTfiSigningUtilsContract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isValidBorrowerSignature((uint256,uint256,uint256,address,uint32,uint32,uint16,uint16,address,address),(uint256,uint256,address,bytes),address)": {
        "notice": "This function is when the lender accepts a borrower's binding listing terms, to validate the lender's signature that the borrower provided off-chain to verify that it did indeed made such listing."
      },
      "isValidBorrowerSignatureBundle((uint256,uint256,uint256,address,uint32,uint32,uint16,uint16,address,address),((address,uint256,bool)[],(address,uint256)[],(address,uint256[],uint256[])[]),(uint256,uint256,address,bytes),address)": {
        "notice": "This function is when the lender accepts a borrower's binding listing terms, to validate the lender's signature that the borrower provided off-chain to verify that it did indeed made such listing."
      },
      "isValidLenderRenegotiationSignature(uint256,uint32,uint256,uint256,(uint256,uint256,address,bytes),address)": {
        "notice": "This function is called in renegotiateLoan() to validate the lender's signature that the lender provided off-chain to verify that they did indeed want to agree to this loan renegotiation according to these terms."
      },
      "isValidLenderSignature((uint256,uint256,uint256,address,uint32,uint16,address,address),(uint256,uint256,address,bytes),address)": {
        "notice": "This function is when the borrower accepts a lender's offer, to validate the lender's signature that the lender provided off-chain to verify that it did indeed made such offer."
      },
      "isValidLenderSignatureBundle((uint256,uint256,uint256,address,uint32,uint16,address,address),((address,uint256,bool)[],(address,uint256)[],(address,uint256[],uint256[])[]),(uint256,uint256,address,bytes),address)": {
        "notice": "This function is when the borrower accepts a lender's offer, to validate the lender's signature that the lender provided off-chain to verify that it did indeed made such offer."
      }
    },
    "notice": "Helper contract for NFTfi. This contract manages externally verifying signatures from off-chain NFTfi orders.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}