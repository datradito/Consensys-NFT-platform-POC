{
  "address": "0x0D48F2229320F6E8DC9239D72112ca2F5F139FF4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftfiHub",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_loanCoordinatorKey",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "LOAN_COORDINATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tradeERC20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_erc20Amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sellerNonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_sellerSignature",
          "type": "bytes"
        }
      ],
      "name": "buyObligationReceipt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tradeERC20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_erc20Amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sellerNonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_sellerSignature",
          "type": "bytes"
        }
      ],
      "name": "buyPromissoryNote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "cancelTradeCommitment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "getNonceUsage",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hub",
      "outputs": [
        {
          "internalType": "contract INftfiHub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tradeERC20",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tradeNft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_erc20Amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_accepter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_accepterNonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_accepterSignature",
          "type": "bytes"
        }
      ],
      "name": "isValidTradeSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tradeERC20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_erc20Amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_buyerNonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_buyerSignature",
          "type": "bytes"
        }
      ],
      "name": "sellObligationReceipt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tradeERC20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_erc20Amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_buyerNonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_buyerSignature",
          "type": "bytes"
        }
      ],
      "name": "sellPromissoryNote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb01ba95cfdb48dc1da37e1ea46ce0e79a3c168e37891ca0410c1363783235f4b",
  "receipt": {
    "to": null,
    "from": "0x02e037F56728E947e92Af2c05baF7FeF387Ddd06",
    "contractAddress": "0x0D48F2229320F6E8DC9239D72112ca2F5F139FF4",
    "transactionIndex": 1,
    "gasUsed": "1265797",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x49250fdde4efae14f799ac5a605d4b623dcdfa9a1386cf53fd0c7c3612a87cdd",
    "transactionHash": "0xb01ba95cfdb48dc1da37e1ea46ce0e79a3c168e37891ca0410c1363783235f4b",
    "logs": [],
    "blockNumber": 10376451,
    "cumulativeGasUsed": "1303537",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5165C6D1BaBD35B6c770140fea24dA3209f9Fa1d",
    "0x4449524543545f4c4f414e5f434f4f5244494e41544f52000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "e960dbb71492b307ed8580de393cc147",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftfiHub\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_loanCoordinatorKey\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LOAN_COORDINATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tradeERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_erc20Amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sellerNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sellerSignature\",\"type\":\"bytes\"}],\"name\":\"buyObligationReceipt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tradeERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_erc20Amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sellerNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sellerSignature\",\"type\":\"bytes\"}],\"name\":\"buyPromissoryNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"cancelTradeCommitment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getNonceUsage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hub\",\"outputs\":[{\"internalType\":\"contract INftfiHub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tradeERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tradeNft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_erc20Amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_accepter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_accepterNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_accepterSignature\",\"type\":\"bytes\"}],\"name\":\"isValidTradeSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tradeERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_erc20Amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyerNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_buyerSignature\",\"type\":\"bytes\"}],\"name\":\"sellObligationReceipt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tradeERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_erc20Amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyerNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_buyerSignature\",\"type\":\"bytes\"}],\"name\":\"sellPromissoryNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelTradeCommitment(uint256)\":{\"params\":{\"_nonce\":\"- User nonce\"}},\"getNonceUsage(address,uint256)\":{\"params\":{\"_nonce\":\"- The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes: - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once. - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelTradeCommitment() , which marks the nonce as used and prevents any future trade from using the user's off-chain order that contains that nonce.\",\"_user\":\"- The address of the user. This function works for both lenders and borrowers alike.\"},\"returns\":{\"_0\":\"A bool representing whether or not this nonce has been used for this user.\"}},\"isValidTradeSignature(address,address,uint256,uint256,address,uint256,uint256,bytes)\":{\"params\":{\"_accepter\":\"- address of the user accepting the proposed trade, they have created the off-chain signature\",\"_accepterNonce\":\"- The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes: - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once. - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelTradeCommitment() , which marks the nonce as used and prevents any future trade from using the user's off-chain order that contains that nonce.\",\"_accepterSignature\":\"- The ECDSA signature of the trade initiator, obtained off-chain ahead of time, signing the following combination of parameters: - tradeERC20, - tradeLoanNft, - loanNftId, - erc20Amount, - initiator, - accepter, - initiatorNonce, - expiry, - chainId\",\"_erc20Amount\":\"- amount of payment price in erc20 for the loanNFT\",\"_expiry\":\"- The date when the trade offer expires\",\"_nftId\":\"- ID of the loanNFT to be tradeped\",\"_tradeERC20\":\"- Contract address for the token denomination of the erc20 side of the trade, can only be a premitted erc20 token\",\"_tradeNft\":\"- Contract address for the loanNFT side of the trade, can only be the 'promissory note' or the 'obligation receipt' of the used loan coordinator\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyObligationReceipt(address,uint256,uint256,address,uint256,uint256,bytes)\":{\"notice\":\"trade initiator buys obligation receipt of the accepter Activates an off chain proposed ERC20-loanNFT token trade, works very much like the loan offer acceptal both parties have to approve the token allowances for the trade contract before calling this function parameters: see trade()\"},\"buyPromissoryNote(address,uint256,uint256,address,uint256,uint256,bytes)\":{\"notice\":\"trade initiator buys promissory note of the accepter Activates an off chain proposed ERC20-loanNFT token trade, works very much like the loan offer acceptal both parties have to approve the token allowances for the trade contract before calling this function parameters: see trade()\"},\"cancelTradeCommitment(uint256)\":{\"notice\":\"This function can be called by the initiator to cancel all off-chain orders that they have signed that contain this nonce. If the off-chain orders were created correctly, there should only be one off-chain order that contains this nonce at all. The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelTradeCommitment(), which marks the nonce as used and prevents any future trade from using the user's off-chain order that contains that nonce.\"},\"getNonceUsage(address,uint256)\":{\"notice\":\"This function can be used to view whether a particular nonce for a particular user has already been used, either from a successful trade or a cancelled off-chain order.\"},\"isValidTradeSignature(address,address,uint256,uint256,address,uint256,uint256,bytes)\":{\"notice\":\"This function is called in trade()to validate the trade initiator's signature that the lender has provided off-chain to verify that they did indeed want to agree to this loan renegotiation according to these terms.\"},\"sellObligationReceipt(address,uint256,uint256,address,uint256,uint256,bytes)\":{\"notice\":\"trade initiator sells their obligation receipt to the accepter Activates an off chain proposed ERC20-loanNFT token trade, works very much like the loan offer acceptal both parties have to approve the token allowances for the trade contract before calling this function parameters: see trade()\"},\"sellPromissoryNote(address,uint256,uint256,address,uint256,uint256,bytes)\":{\"notice\":\"trade initiator sells their promissory note to the accepter Activates an off chain proposed ERC20-loanNFT token trade, works very much like the loan offer acceptal both parties have to approve the token allowances for the trade contract before calling this function parameters: see trade()\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/TokenTrade.sol\":\"TokenTrade\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/IDirectLoanCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title IDirectLoanCoordinator\\n * @author NFTfi\\n * @dev DirectLoanCoordinator interface.\\n */\\ninterface IDirectLoanCoordinator {\\n    enum StatusType {\\n        NOT_EXISTS,\\n        NEW,\\n        RESOLVED\\n    }\\n\\n    /**\\n     * @notice This struct contains data related to a loan\\n     *\\n     * @param smartNftId - The id of both the promissory note and obligation receipt.\\n     * @param status - The status in which the loan currently is.\\n     * @param loanContract - Address of the LoanType contract that created the loan.\\n     */\\n    struct Loan {\\n        address loanContract;\\n        uint64 smartNftId;\\n        StatusType status;\\n    }\\n\\n    function registerLoan(address _lender, bytes32 _loanType) external returns (uint32);\\n\\n    function mintObligationReceipt(uint32 _loanId, address _borrower) external;\\n\\n    function resolveLoan(uint32 _loanId) external;\\n\\n    function promissoryNoteToken() external view returns (address);\\n\\n    function obligationReceiptToken() external view returns (address);\\n\\n    function getLoanData(uint32 _loanId) external view returns (Loan memory);\\n\\n    function isValidLoanId(uint32 _loanId, address _loanContract) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa2a71768932bf3400304a6846fd764fe5f78407670b41a5ebaed8950aa035f77\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INftfiHub.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title INftfiHub\\n * @author NFTfi\\n * @dev NftfiHub interface\\n */\\ninterface INftfiHub {\\n    function setContract(string calldata _contractKey, address _contractAddress) external;\\n\\n    function getContract(bytes32 _contractKey) external view returns (address);\\n}\\n\",\"keccak256\":\"0x80259ebf45729166a8524b313741b6ea2acfe8ac9dc15243f018a08cc2b14240\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPermittedERC20s.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\ninterface IPermittedERC20s {\\n    function getERC20Permit(address _erc20) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd159a7f11adfd21220c0acbb85917b5019a82d4912c2fecb20449b267ca9ca15\",\"license\":\"BUSL-1.1\"},\"contracts/utils/ContractKeys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title ContractKeys\\n * @author NFTfi\\n * @dev Common library for contract keys\\n */\\nlibrary ContractKeys {\\n    bytes32 public constant PERMITTED_ERC20S = bytes32(\\\"PERMITTED_ERC20S\\\");\\n    bytes32 public constant PERMITTED_NFTS = bytes32(\\\"PERMITTED_NFTS\\\");\\n    bytes32 public constant PERMITTED_PARTNERS = bytes32(\\\"PERMITTED_PARTNERS\\\");\\n    bytes32 public constant NFT_TYPE_REGISTRY = bytes32(\\\"NFT_TYPE_REGISTRY\\\");\\n    bytes32 public constant LOAN_REGISTRY = bytes32(\\\"LOAN_REGISTRY\\\");\\n    bytes32 public constant PERMITTED_SNFT_RECEIVER = bytes32(\\\"PERMITTED_SNFT_RECEIVER\\\");\\n    bytes32 public constant PERMITTED_BUNDLE_ERC20S = bytes32(\\\"PERMITTED_BUNDLE_ERC20S\\\");\\n    bytes32 public constant PERMITTED_AIRDROPS = bytes32(\\\"PERMITTED_AIRDROPS\\\");\\n    bytes32 public constant AIRDROP_RECEIVER = bytes32(\\\"AIRDROP_RECEIVER\\\");\\n    bytes32 public constant AIRDROP_FACTORY = bytes32(\\\"AIRDROP_FACTORY\\\");\\n    bytes32 public constant AIRDROP_FLASH_LOAN = bytes32(\\\"AIRDROP_FLASH_LOAN\\\");\\n    bytes32 public constant NFTFI_BUNDLER = bytes32(\\\"NFTFI_BUNDLER\\\");\\n\\n    string public constant AIRDROP_WRAPPER_STRING = \\\"AirdropWrapper\\\";\\n\\n    /**\\n     * @notice Returns the bytes32 representation of a string\\n     * @param _key the string key\\n     * @return id bytes32 representation\\n     */\\n    function getIdFromStringKey(string memory _key) external pure returns (bytes32 id) {\\n        require(bytes(_key).length <= 32, \\\"invalid key\\\");\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := mload(add(_key, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2fa7e704ddc4095a739ac5dca2cd49cb261f7b881778038398e9e7d5063c1a25\",\"license\":\"BUSL-1.1\"},\"contracts/utils/TokenTrade.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/ContractKeys.sol\\\";\\nimport \\\"../interfaces/IPermittedERC20s.sol\\\";\\nimport \\\"../interfaces/INftfiHub.sol\\\";\\nimport \\\"../interfaces/IDirectLoanCoordinator.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract TokenTrade {\\n    using SafeERC20 for IERC20;\\n    using ECDSA for bytes32;\\n\\n    INftfiHub public hub;\\n\\n    bytes32 public immutable LOAN_COORDINATOR;\\n\\n    constructor(address _nftfiHub, bytes32 _loanCoordinatorKey) {\\n        hub = INftfiHub(_nftfiHub);\\n        LOAN_COORDINATOR = _loanCoordinatorKey;\\n    }\\n\\n    /**\\n     * @notice A mapping that takes both a user's address and a trade nonce that was first used when signing an\\n     * off-chain order and checks whether that nonce has previously either been used for a trade, or has been\\n     * pre-emptively cancelled. The nonce referred to here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to nonces that are used by both the lender and the borrower when they are first\\n     * signing off-chain NFTfi orders.\\n     *\\n     * These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each\\n     * nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower\\n     * in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would submit a\\n     * user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelTradeCommitment(), which marks the nonce as used and prevents any future trade from\\n     * using the user's off-chain order that contains that nonce.\\n     */\\n    mapping(address => mapping(uint256 => bool)) private _nonceHasBeenUsedForUser;\\n\\n    /**\\n     * @notice This function can be called by the initiator to cancel all off-chain orders that they\\n     * have signed that contain this nonce. If the off-chain orders were created correctly, there should only be one\\n     * off-chain order that contains this nonce at all.\\n     *\\n     * The nonce referred to here is not the same as an Ethereum account's nonce. We are referring\\n     * instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi\\n     * orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order.\\n     * Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the\\n     * borrower in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would\\n     * submit a user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelTradeCommitment(), which marks the nonce as used and prevents any future trade from\\n     * using the user's off-chain order that contains that nonce.\\n     *\\n     * @param  _nonce - User nonce\\n     */\\n    function cancelTradeCommitment(uint256 _nonce) external {\\n        require(!_nonceHasBeenUsedForUser[msg.sender][_nonce], \\\"Invalid nonce\\\");\\n        _nonceHasBeenUsedForUser[msg.sender][_nonce] = true;\\n    }\\n\\n    /**\\n     * @notice This function can be used to view whether a particular nonce for a particular user has already been used,\\n     * either from a successful trade or a cancelled off-chain order.\\n     *\\n     * @param _user - The address of the user. This function works for both lenders and borrowers alike.\\n     * @param  _nonce - The nonce referred to here is not the same as an Ethereum account's nonce. We are referring\\n     * instead to nonces that are used by both the lender and the borrower when they are first signing off-chain\\n     * NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain\\n     * order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or\\n     * the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelTradeCommitment()\\n     * , which marks the nonce as used and prevents any future trade from using the user's off-chain order that contains\\n     * that nonce.\\n     *\\n     * @return A bool representing whether or not this nonce has been used for this user.\\n     */\\n    function getNonceUsage(address _user, uint256 _nonce) external view returns (bool) {\\n        return _nonceHasBeenUsedForUser[_user][_nonce];\\n    }\\n\\n    /**\\n     * @notice trade initiator sells their obligation receipt to the accepter\\n     * Activates an off chain proposed ERC20-loanNFT token trade, works very much like the loan offer acceptal\\n     * both parties have to approve the token allowances for the trade contract before calling this function\\n     *\\n     * parameters: see trade()\\n     */\\n    function sellObligationReceipt(\\n        address _tradeERC20,\\n        uint256 _nftId,\\n        uint256 _erc20Amount,\\n        address _buyer,\\n        uint256 _buyerNonce,\\n        uint256 _expiry,\\n        bytes memory _buyerSignature\\n    ) external {\\n        require(!_nonceHasBeenUsedForUser[_buyer][_buyerNonce], \\\"Buyer nonce invalid\\\");\\n        _nonceHasBeenUsedForUser[_buyer][_buyerNonce] = true;\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(hub.getContract(LOAN_COORDINATOR));\\n        address obligationReceipt = loanCoordinator.obligationReceiptToken();\\n        require(\\n            isValidTradeSignature(\\n                _tradeERC20,\\n                obligationReceipt,\\n                _nftId,\\n                _erc20Amount,\\n                _buyer,\\n                _buyerNonce,\\n                _expiry,\\n                _buyerSignature\\n            ),\\n            \\\"Trade signature is invalid\\\"\\n        );\\n        trade(_tradeERC20, obligationReceipt, _nftId, _erc20Amount, msg.sender, _buyer);\\n    }\\n\\n    /**\\n     * @notice trade initiator buys obligation receipt of the accepter\\n     * Activates an off chain proposed ERC20-loanNFT token trade, works very much like the loan offer acceptal\\n     * both parties have to approve the token allowances for the trade contract before calling this function\\n     *\\n     * parameters: see trade()\\n     */\\n    function buyObligationReceipt(\\n        address _tradeERC20,\\n        uint256 _nftId,\\n        uint256 _erc20Amount,\\n        address _seller,\\n        uint256 _sellerNonce,\\n        uint256 _expiry,\\n        bytes memory _sellerSignature\\n    ) external {\\n        require(!_nonceHasBeenUsedForUser[_seller][_sellerNonce], \\\"Seller nonce invalid\\\");\\n        _nonceHasBeenUsedForUser[_seller][_sellerNonce] = true;\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(hub.getContract(LOAN_COORDINATOR));\\n        address obligationReceipt = loanCoordinator.obligationReceiptToken();\\n        require(\\n            isValidTradeSignature(\\n                _tradeERC20,\\n                obligationReceipt,\\n                _nftId,\\n                _erc20Amount,\\n                _seller,\\n                _sellerNonce,\\n                _expiry,\\n                _sellerSignature\\n            ),\\n            \\\"Trade signature is invalid\\\"\\n        );\\n        trade(_tradeERC20, obligationReceipt, _nftId, _erc20Amount, _seller, msg.sender);\\n    }\\n\\n    /**\\n     * @notice trade initiator sells their promissory note to the accepter\\n     * Activates an off chain proposed ERC20-loanNFT token trade, works very much like the loan offer acceptal\\n     * both parties have to approve the token allowances for the trade contract before calling this function\\n     *\\n     * parameters: see trade()\\n     */\\n    function sellPromissoryNote(\\n        address _tradeERC20,\\n        uint256 _nftId,\\n        uint256 _erc20Amount,\\n        address _buyer,\\n        uint256 _buyerNonce,\\n        uint256 _expiry,\\n        bytes memory _buyerSignature\\n    ) external {\\n        require(!_nonceHasBeenUsedForUser[_buyer][_buyerNonce], \\\"Buyer nonce invalid\\\");\\n        _nonceHasBeenUsedForUser[_buyer][_buyerNonce] = true;\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(hub.getContract(LOAN_COORDINATOR));\\n        address promissoryNote = loanCoordinator.promissoryNoteToken();\\n        require(\\n            isValidTradeSignature(\\n                _tradeERC20,\\n                promissoryNote,\\n                _nftId,\\n                _erc20Amount,\\n                _buyer,\\n                _buyerNonce,\\n                _expiry,\\n                _buyerSignature\\n            ),\\n            \\\"Trade signature is invalid\\\"\\n        );\\n        trade(_tradeERC20, promissoryNote, _nftId, _erc20Amount, msg.sender, _buyer);\\n    }\\n\\n    /**\\n     * @notice trade initiator buys promissory note of the accepter\\n     * Activates an off chain proposed ERC20-loanNFT token trade, works very much like the loan offer acceptal\\n     * both parties have to approve the token allowances for the trade contract before calling this function\\n     *\\n     * parameters: see trade()\\n     */\\n    function buyPromissoryNote(\\n        address _tradeERC20,\\n        uint256 _nftId,\\n        uint256 _erc20Amount,\\n        address _seller,\\n        uint256 _sellerNonce,\\n        uint256 _expiry,\\n        bytes memory _sellerSignature\\n    ) external {\\n        require(!_nonceHasBeenUsedForUser[_seller][_sellerNonce], \\\"Seller nonce invalid\\\");\\n        _nonceHasBeenUsedForUser[_seller][_sellerNonce] = true;\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(hub.getContract(LOAN_COORDINATOR));\\n        address promissoryNote = loanCoordinator.promissoryNoteToken();\\n        require(\\n            isValidTradeSignature(\\n                _tradeERC20,\\n                promissoryNote,\\n                _nftId,\\n                _erc20Amount,\\n                _seller,\\n                _sellerNonce,\\n                _expiry,\\n                _sellerSignature\\n            ),\\n            \\\"Trade signature is invalid\\\"\\n        );\\n        trade(_tradeERC20, promissoryNote, _nftId, _erc20Amount, _seller, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Activates an off chain proposed ERC20-loanNFT token trade, works very much like the loan offer acceptal\\n     * both parties have to approve the token allowances for the trade contract before calling this function\\n     *\\n     * @param _tradeERC20 - Contract address for the token denomination of the erc20 side of the trade,\\n     * can only be a premitted erc20 token\\n     * @param _tradeNft - Contract address for the loanNFT side of the trade,\\n     * can only be the 'promissory note' or the 'obligation receipt' of the used loan coordinator\\n     * @param _nftId - ID of the loanNFT to be tradeped\\n     * true:\\n     *      initiator sells loanNFT for erc20, accepter buys loanNFT for erc20\\n     * false:\\n     *      initiator buys loanNFT for erc20, accepter sells loanNFT for erc20\\n     * @param _erc20Amount - amount of payment price in erc20 for the loanNFT\\n     * @param _seller - address of the user selling the loanNFT for ERC20 tokens\\n     * @param _buyer - address of the user buying the loanNFT for ERC20 tokens\\n     */\\n    function trade(\\n        address _tradeERC20,\\n        address _tradeNft,\\n        uint256 _nftId,\\n        uint256 _erc20Amount,\\n        address _seller,\\n        address _buyer\\n    ) internal {\\n        require(\\n            IPermittedERC20s(hub.getContract(ContractKeys.PERMITTED_ERC20S)).getERC20Permit(_tradeERC20),\\n            \\\"Currency denomination is not permitted\\\"\\n        );\\n        IERC20(_tradeERC20).safeTransferFrom(_buyer, _seller, _erc20Amount);\\n        IERC721(_tradeNft).safeTransferFrom(_seller, _buyer, _nftId);\\n    }\\n\\n    /**\\n     * @notice This function is called in trade()to validate the trade initiator's signature that the lender\\n     * has provided off-chain to verify that they did indeed want to\\n     * agree to this loan renegotiation according to these terms.\\n     *\\n     * @param _tradeERC20 - Contract address for the token denomination of the erc20 side of the trade,\\n     * can only be a premitted erc20 token\\n     * @param _tradeNft - Contract address for the loanNFT side of the trade,\\n     * can only be the 'promissory note' or the 'obligation receipt' of the used loan coordinator\\n     * @param _nftId - ID of the loanNFT to be tradeped\\n     * @param _erc20Amount - amount of payment price in erc20 for the loanNFT\\n     * @param _accepter - address of the user accepting the proposed trade, they have created the off-chain signature\\n     * @param _accepterNonce - The nonce referred to here is not the same as an Ethereum account's nonce. We are\\n     * referring instead to nonces that are used by both the lender and the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelTradeCommitment()\\n     * , which marks the nonce as used and prevents any future trade from using the user's off-chain order that contains\\n     * that nonce.\\n     * @param _expiry - The date when the trade offer expires\\n     * @param _accepterSignature - The ECDSA signature of the trade initiator,\\n     * obtained off-chain ahead of time, signing the\\n     * following combination of parameters:\\n     * - tradeERC20,\\n     * - tradeLoanNft,\\n     * - loanNftId,\\n     * - erc20Amount,\\n     * - initiator,\\n     * - accepter,\\n     * - initiatorNonce,\\n     * - expiry,\\n     * - chainId\\n     */\\n    function isValidTradeSignature(\\n        address _tradeERC20,\\n        address _tradeNft,\\n        uint256 _nftId,\\n        uint256 _erc20Amount,\\n        address _accepter,\\n        uint256 _accepterNonce,\\n        uint256 _expiry,\\n        bytes memory _accepterSignature\\n    ) public view returns (bool) {\\n        require(block.timestamp <= _expiry, \\\"Trade Signature has expired\\\");\\n        if (_accepter == address(0)) {\\n            return false;\\n        } else {\\n            bytes32 message = keccak256(\\n                abi.encodePacked(\\n                    _tradeERC20,\\n                    _tradeNft,\\n                    _nftId,\\n                    _erc20Amount,\\n                    _accepter,\\n                    _accepterNonce,\\n                    _expiry,\\n                    getChainID()\\n                )\\n            );\\n\\n            bytes32 messageWithEthSignPrefix = message.toEthSignedMessageHash();\\n\\n            return (messageWithEthSignPrefix.recover(_accepterSignature) == _accepter);\\n        }\\n    }\\n\\n    /**\\n     * @dev This function gets the current chain ID.\\n     */\\n    function getChainID() internal view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n}\\n\",\"keccak256\":\"0xaa10d39eaa8f02ba7a58df9de8cac924ddf1d2872a46aff581ea97f7f6079cad\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100835760003560e01c80632803ee16146100885780633388b81b146100b0578063365a86fc146100c5578063389ace0d146100f057806377cfa991146101035780639743274414610138578063c3754a271461014b578063d75dbe4914610184578063fdd5365714610197575b600080fd5b61009b610096366004611270565b6101aa565b60405190151581526020015b60405180910390f35b6100c36100be366004611335565b610301565b005b6000546100d8906001600160a01b031681565b6040516001600160a01b0390911681526020016100a7565b6100c36100fe366004611335565b6104c3565b61012a7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100a7565b6100c3610146366004611335565b61067a565b61009b61015936600461130a565b6001600160a01b03919091166000908152600160209081526040808320938352929052205460ff1690565b6100c36101923660046113dc565b6107bd565b6100c36101a5366004611335565b610840565b6000824211156102015760405162461bcd60e51b815260206004820152601b60248201527f5472616465205369676e6174757265206861732065787069726564000000000060448201526064015b60405180910390fd5b6001600160a01b038516610217575060006102f5565b6040805160608b811b6bffffffffffffffffffffffff199081166020808501919091528c831b82166034850152604884018c9052606884018b90529189901b166088830152609c820187905260bc82018690524660dc808401919091528351808403909101815260fc830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000061011c8401526101388084018290528451808503909101815261015890930190935281519101206001600160a01b0387166102e68286610983565b6001600160a01b031614925050505b98975050505050505050565b6001600160a01b038416600090815260016020908152604080832086845290915290205460ff16156103455760405162461bcd60e51b81526004016101f890611467565b6001600160a01b038481166000908152600160208181526040808420888552909152808320805460ff191690921790915581549051631c2d8fb360e31b81527f000000000000000000000000000000000000000000000000000000000000000060048201529192169063e16c7d989060240160206040518083038186803b1580156103cf57600080fd5b505afa1580156103e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104079190611254565b90506000816001600160a01b0316634fbe68a06040518163ffffffff1660e01b815260040160206040518083038186803b15801561044457600080fd5b505afa158015610458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047c9190611254565b905061048e89828a8a8a8a8a8a6101aa565b6104aa5760405162461bcd60e51b81526004016101f8906114c2565b6104b889828a8a8a336109a7565b505050505050505050565b6001600160a01b038416600090815260016020908152604080832086845290915290205460ff16156105075760405162461bcd60e51b81526004016101f890611495565b6001600160a01b038481166000908152600160208181526040808420888552909152808320805460ff191690921790915581549051631c2d8fb360e31b81527f000000000000000000000000000000000000000000000000000000000000000060048201529192169063e16c7d989060240160206040518083038186803b15801561059157600080fd5b505afa1580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c99190611254565b90506000816001600160a01b0316634fbe68a06040518163ffffffff1660e01b815260040160206040518083038186803b15801561060657600080fd5b505afa15801561061a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063e9190611254565b905061065089828a8a8a8a8a8a6101aa565b61066c5760405162461bcd60e51b81526004016101f8906114c2565b6104b889828a8a338b6109a7565b6001600160a01b038416600090815260016020908152604080832086845290915290205460ff16156106be5760405162461bcd60e51b81526004016101f890611495565b6001600160a01b038481166000908152600160208181526040808420888552909152808320805460ff191690921790915581549051631c2d8fb360e31b81527f000000000000000000000000000000000000000000000000000000000000000060048201529192169063e16c7d989060240160206040518083038186803b15801561074857600080fd5b505afa15801561075c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107809190611254565b90506000816001600160a01b0316638208e76c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561060657600080fd5b33600090815260016020908152604080832084845290915290205460ff16156108185760405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964206e6f6e636560981b60448201526064016101f8565b336000908152600160208181526040808420948452939052919020805460ff19169091179055565b6001600160a01b038416600090815260016020908152604080832086845290915290205460ff16156108845760405162461bcd60e51b81526004016101f890611467565b6001600160a01b038481166000908152600160208181526040808420888552909152808320805460ff191690921790915581549051631c2d8fb360e31b81527f000000000000000000000000000000000000000000000000000000000000000060048201529192169063e16c7d989060240160206040518083038186803b15801561090e57600080fd5b505afa158015610922573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109469190611254565b90506000816001600160a01b0316638208e76c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561044457600080fd5b60008060006109928585610b8a565b9150915061099f81610bfa565b509392505050565b600054604051631c2d8fb360e31b81526f5045524d49545445445f45524332305360801b60048201526001600160a01b039091169063e16c7d989060240160206040518083038186803b1580156109fd57600080fd5b505afa158015610a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a359190611254565b60405163439439df60e11b81526001600160a01b038881166004830152919091169063872873be9060240160206040518083038186803b158015610a7857600080fd5b505afa158015610a8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab091906113bc565b610b0b5760405162461bcd60e51b815260206004820152602660248201527f43757272656e63792064656e6f6d696e6174696f6e206973206e6f74207065726044820152651b5a5d1d195960d21b60648201526084016101f8565b610b206001600160a01b038716828486610df9565b604051632142170760e11b81526001600160a01b038616906342842e0e90610b5090859085908990600401611410565b600060405180830381600087803b158015610b6a57600080fd5b505af1158015610b7e573d6000803e3d6000fd5b50505050505050505050565b600080825160411415610bc15760208301516040840151606085015160001a610bb587828585610e57565b94509450505050610bf3565b825160401415610beb5760208301516040840151610be0868383610f3a565b935093505050610bf3565b506000905060025b9250929050565b6000816004811115610c1c57634e487b7160e01b600052602160045260246000fd5b1415610c255750565b6001816004811115610c4757634e487b7160e01b600052602160045260246000fd5b1415610c905760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b60448201526064016101f8565b6002816004811115610cb257634e487b7160e01b600052602160045260246000fd5b1415610d005760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016101f8565b6003816004811115610d2257634e487b7160e01b600052602160045260246000fd5b1415610d7b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016101f8565b6004816004811115610d9d57634e487b7160e01b600052602160045260246000fd5b1415610df65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016101f8565b50565b610e51846323b872dd60e01b858585604051602401610e1a93929190611410565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610f73565b50505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115610e845750600090506003610f31565b8460ff16601b14158015610e9c57508460ff16601c14155b15610ead5750600090506004610f31565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610f01573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610f2a57600060019250925050610f31565b9150600090505b94509492505050565b6000806001600160ff1b03831681610f5760ff86901c601b6114f9565b9050610f6587828885610e57565b935093505050935093915050565b6000610fc8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661104a9092919063ffffffff16565b8051909150156110455780806020019051810190610fe691906113bc565b6110455760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101f8565b505050565b60606110598484600085611063565b90505b9392505050565b6060824710156110c45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101f8565b6001600160a01b0385163b61111b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101f8565b600080866001600160a01b0316858760405161113791906113f4565b60006040518083038185875af1925050503d8060008114611174576040519150601f19603f3d011682016040523d82523d6000602084013e611179565b606091505b5091509150611189828286611194565b979650505050505050565b606083156111a357508161105c565b8251156111b35782518084602001fd5b8160405162461bcd60e51b81526004016101f89190611434565b600082601f8301126111dd578081fd5b813567ffffffffffffffff808211156111f8576111f8611549565b604051601f8301601f19908116603f0116810190828211818310171561122057611220611549565b81604052838152866020858801011115611238578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215611265578081fd5b815161105c8161155f565b600080600080600080600080610100898b03121561128c578384fd5b88356112978161155f565b975060208901356112a78161155f565b9650604089013595506060890135945060808901356112c58161155f565b935060a0890135925060c0890135915060e089013567ffffffffffffffff8111156112ee578182fd5b6112fa8b828c016111cd565b9150509295985092959890939650565b6000806040838503121561131c578182fd5b82356113278161155f565b946020939093013593505050565b600080600080600080600060e0888a03121561134f578283fd5b873561135a8161155f565b9650602088013595506040880135945060608801356113788161155f565b93506080880135925060a0880135915060c088013567ffffffffffffffff8111156113a1578182fd5b6113ad8a828b016111cd565b91505092959891949750929550565b6000602082840312156113cd578081fd5b8151801515811461105c578182fd5b6000602082840312156113ed578081fd5b5035919050565b6000825161140681846020870161151d565b9190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b602081526000825180602084015261145381604085016020870161151d565b601f01601f19169190910160400192915050565b60208082526014908201527314d95b1b195c881b9bdb98d9481a5b9d985b1a5960621b604082015260600190565b602080825260139082015272109d5e595c881b9bdb98d9481a5b9d985b1a59606a1b604082015260600190565b6020808252601a908201527f5472616465207369676e617475726520697320696e76616c6964000000000000604082015260600190565b6000821982111561151857634e487b7160e01b81526011600452602481fd5b500190565b60005b83811015611538578181015183820152602001611520565b83811115610e515750506000910152565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610df657600080fdfea164736f6c6343000804000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancelTradeCommitment(uint256)": {
        "params": {
          "_nonce": "- User nonce"
        }
      },
      "getNonceUsage(address,uint256)": {
        "params": {
          "_nonce": "- The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes: - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once. - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelTradeCommitment() , which marks the nonce as used and prevents any future trade from using the user's off-chain order that contains that nonce.",
          "_user": "- The address of the user. This function works for both lenders and borrowers alike."
        },
        "returns": {
          "_0": "A bool representing whether or not this nonce has been used for this user."
        }
      },
      "isValidTradeSignature(address,address,uint256,uint256,address,uint256,uint256,bytes)": {
        "params": {
          "_accepter": "- address of the user accepting the proposed trade, they have created the off-chain signature",
          "_accepterNonce": "- The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes: - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once. - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelTradeCommitment() , which marks the nonce as used and prevents any future trade from using the user's off-chain order that contains that nonce.",
          "_accepterSignature": "- The ECDSA signature of the trade initiator, obtained off-chain ahead of time, signing the following combination of parameters: - tradeERC20, - tradeLoanNft, - loanNftId, - erc20Amount, - initiator, - accepter, - initiatorNonce, - expiry, - chainId",
          "_erc20Amount": "- amount of payment price in erc20 for the loanNFT",
          "_expiry": "- The date when the trade offer expires",
          "_nftId": "- ID of the loanNFT to be tradeped",
          "_tradeERC20": "- Contract address for the token denomination of the erc20 side of the trade, can only be a premitted erc20 token",
          "_tradeNft": "- Contract address for the loanNFT side of the trade, can only be the 'promissory note' or the 'obligation receipt' of the used loan coordinator"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyObligationReceipt(address,uint256,uint256,address,uint256,uint256,bytes)": {
        "notice": "trade initiator buys obligation receipt of the accepter Activates an off chain proposed ERC20-loanNFT token trade, works very much like the loan offer acceptal both parties have to approve the token allowances for the trade contract before calling this function parameters: see trade()"
      },
      "buyPromissoryNote(address,uint256,uint256,address,uint256,uint256,bytes)": {
        "notice": "trade initiator buys promissory note of the accepter Activates an off chain proposed ERC20-loanNFT token trade, works very much like the loan offer acceptal both parties have to approve the token allowances for the trade contract before calling this function parameters: see trade()"
      },
      "cancelTradeCommitment(uint256)": {
        "notice": "This function can be called by the initiator to cancel all off-chain orders that they have signed that contain this nonce. If the off-chain orders were created correctly, there should only be one off-chain order that contains this nonce at all. The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelTradeCommitment(), which marks the nonce as used and prevents any future trade from using the user's off-chain order that contains that nonce."
      },
      "getNonceUsage(address,uint256)": {
        "notice": "This function can be used to view whether a particular nonce for a particular user has already been used, either from a successful trade or a cancelled off-chain order."
      },
      "isValidTradeSignature(address,address,uint256,uint256,address,uint256,uint256,bytes)": {
        "notice": "This function is called in trade()to validate the trade initiator's signature that the lender has provided off-chain to verify that they did indeed want to agree to this loan renegotiation according to these terms."
      },
      "sellObligationReceipt(address,uint256,uint256,address,uint256,uint256,bytes)": {
        "notice": "trade initiator sells their obligation receipt to the accepter Activates an off chain proposed ERC20-loanNFT token trade, works very much like the loan offer acceptal both parties have to approve the token allowances for the trade contract before calling this function parameters: see trade()"
      },
      "sellPromissoryNote(address,uint256,uint256,address,uint256,uint256,bytes)": {
        "notice": "trade initiator sells their promissory note to the accepter Activates an off chain proposed ERC20-loanNFT token trade, works very much like the loan offer acceptal both parties have to approve the token allowances for the trade contract before calling this function parameters: see trade()"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21605,
        "contract": "contracts/utils/TokenTrade.sol:TokenTrade",
        "label": "hub",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(INftfiHub)14051"
      },
      {
        "astId": 21632,
        "contract": "contracts/utils/TokenTrade.sol:TokenTrade",
        "label": "_nonceHasBeenUsedForUser",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(INftfiHub)14051": {
        "encoding": "inplace",
        "label": "contract INftfiHub",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}